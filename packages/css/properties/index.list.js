const { property } = require("../../templates");

const COLOR = "Color";

const globalValues = [
    "inherit",
    "initial",
    "revert",
    "unset",
    "revert",
    "revert-layer",
];

const ListOfCssProperties = {
    accentColor: property({
        css: "accent-color",
        values: ["auto"],
        type: COLOR,
        docs: [
            "The accent-color CSS property sets the accent color for user-interface controls generated by some elements.",
            "",
            "Browsers that support accent-color currently apply it to the following HTML elements:",
            '* `<input type="checkbox">`',
            '* `<input type="radio">`',
            '* `<input type="range">`',
            "* `<progress>`",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color",
        ],
    }),
    alignContent: property({
        css: "align-content",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "normal",
            "baseline",
            "first baseline",
            "last baseline",
            "space-between",
            "space-around",
            "space-evenly",
            "stretch",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        docs: [
            "The CSS align-content property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.",
            "",
            "This property has no effect on single line flex containers (i.e. ones with ``flex-wrap: nowrap``).",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/align-content",
        ],
    }),
    alignItems: property({
        css: "align-items",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "normal",
            "baseline",
            "first baseline",
            "last baseline",
            "stretch",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        docs: [
            "The CSS align-items property sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"],
    }),
    alignSelf: property({
        css: "align-self",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "normal",
            "baseline",
            "first baseline",
            "last baseline",
            "space-between",
            "space-around",
            "space-evenly",
            "self-start",
            "self-end",
            "stretch",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        docs: [
            "The align-self CSS property overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.",
            "",
            "The property doesn't apply to block-level boxes, or to table cells. If a flexbox item's cross-axis margin is auto, then align-self is ignored.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"],
    }),
    alignTracks: property({
        css: "align-tracks",
        values: ["start", "space-between", "center"],
        type: "string",
        docs: [
            "**Experimental: This is an experimental technology Check the browser compatibility table carefully before using this in production.**",
            "",
            "The align-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.",
            "",
            "The property can take a single value, in which case all tracks are aligned in the same way. If a list of values is used then the first value applies to the first track in the grid axis, the second to the next and so on.",
            "",
            "If there are fewer values than tracks, the last value is used for all remaining tracks. If there are more values than tracks, any additional values are ignored.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/align-tracks",
        ],
    }),
    all: property({
        css: "all",
        values: [],
        type: "string",
        support: [
            "The all shorthand CSS property resets all of an element's properties except ``unicode-bidi``, ``direction``, and ``CSS Custom Properties``. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/all"],
    }),
    animation: property({
        css: "animation",
        values: [],
        type: "string",
        docs: [
            "The animation shorthand CSS property applies an animation between styles. It is a shorthand for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state.",
            "",
            "This property is a shorthand for the following CSS properties:",
            "* animation-delay",
            "* animation-direction",
            "* animation-duration",
            "* animation-fill-mode",
            "* animation-iteration-count",
            "* animation-name",
            "* animation-play-state",
            "* animation-timing-function",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/animation"],
    }),
    animationDelay: property({
        css: "animation-delay",
        values: [],
        type: "string",
        docs: [
            "The animation-delay CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay",
        ],
    }),
    animationDuration: property({
        css: "animation-duration",
        values: [],
        type: "string",
        docs: [
            "The animation-duration CSS property sets the length of time that an animation takes to complete one cycle.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration",
        ],
    }),
    animationFillMode: property({
        css: "animation-fill-mode",
        values: ["none", "forwards", "backwards", "both"],
        type: "string",
        docs: [
            "The animation-fill-mode CSS property sets how a CSS animation applies styles to its target before and after its execution.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode",
        ],
    }),
    animationIterationCount: property({
        css: "animation-iteration-count",
        values: ["infinite"],
        type: "number",
        docs: [
            "The animation-iteration-count CSS property sets the number of times an animation sequence should be played before stopping.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count",
        ],
    }),
    animationName: property({
        css: "animation-name",
        values: [],
        type: "string",
        docs: [
            "The animation-name CSS property specifies the names of one or more @keyframes at-rules describing the animation or animations to apply to the element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name",
        ],
    }),
    animationPlayState: property({
        css: "animation-play-state",
        values: ["running", "paused"],
        type: "string",
        docs: [
            "The animation-play-state CSS property sets whether an animation is running or paused.",
            "",
            "Resuming a paused animation will start the animation from where it left off at the time it was paused, rather than starting over from the beginning of the animation sequence.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state",
        ],
    }),
    animationTimingFunction: property({
        css: "animation-timing-function",
        values: [
            "ease",
            "ease-in",
            "ease-out",
            "ease-in-out",
            "linear",
            "step-start",
            "step-end",
        ],
        type: "string",
        docs: [
            "The animation-timing-function CSS property sets how an animation progresses through the duration of each cycle.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function",
        ],
    }),
    appearance: property({
        css: "appearance",
        values: [
            "none",
            "auto",
            "menulist-button",
            "textfield",
            "button",
            "searchfield",
            "textarea",
            "push-button",
            "slide-horizontal",
            "checkbox",
            "radio",
            "square-button",
            "menulist",
            "meter",
            "progress-bar",
        ],
        type: "string",
        docs: [
            "The appearance CSS property is used to control native appearance of UI controls, that are based on operating system's theme.",
            "",
            "Before standardization this property allowed simple elements to be shown as widgets, such as buttons or check boxes. It was considered a misfeature and authors are encouraged to use only standard keywords now.",
            "_Note: If you wish to use this property on websites, you should test it very carefully. Although it is supported in most modern browsers, its implementation varies. In older browsers, even the keyword none does not have the same effect on all form elements across different browsers, and some do not support it at all. The differences are smaller in the newest browsers._",
        ],
        support: ["-webkit-appearance", "-moz-appearance"],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/appearance"],
    }),
    ascentOverride: property({
        css: "ascent-override",
        values: [],
        type: "string",
        docs: [
            "The ascent-override CSS descriptor defines the ascent metric for the font. The ascent metric is the height above the baseline that CSS uses to lay out line boxes in an inline formatting context.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/ascent-override",
        ],
    }),
    aspectRatio: property({
        css: "aspect-ratio",
        values: ["auto"],
        type: "string",
        docs: [
            "The aspect-ratio CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
        ],
    }),
    backdropFilter: property({
        css: "backdrop-filter",
        values: ["none"],
        type: "string",
        docs: [
            "The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter",
        ],
    }),
    backfaceVisibility: property({
        css: "backface-visibility",
        values: ["hidden", "visible"],
        type: "string",
        docs: [
            "The backface-visibility CSS property sets whether the back face of an element is visible when turned towards the user.",
            "",
            "An element's back face is a mirror image of its front face. Though invisible in 2D, the back face can become visible when a transformation causes the element to be rotated in 3D space. (This property has no effect on 2D transforms, which have no perspective.)",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility",
        ],
    }),
    background: property({
        css: "background",
        values: [],
        type: "string",
        docs: [
            "The background shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.",
            "",
            "This property is a shorthand for the following CSS properties:",
            "* background-attachment",
            "* background-clip",
            "* background-color",
            "* background-image",
            "* background-origin",
            "* background-position",
            "* background-repeat",
            "* background-size",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/background"],
    }),
    backgroundAttachment: property({
        css: "background-attachment",
        values: ["scroll", "fixed", "local"],
        type: "string",
        docs: [
            "The background-attachment CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment",
        ],
    }),
    backgroundBlendMode: property({
        css: "background-blend-mode",
        values: [],
        type: "string",
        docs: [
            "The background-blend-mode CSS property sets how an element's background images should blend with each other and with the element's background color.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode",
        ],
    }),
    backgroundClip: property({
        css: "background-clip",
        values: ["border-box", "padding-box", "content-box", "text"],
        type: "string",
        docs: [
            "The background-clip CSS property sets whether an element's background extends underneath its border box, padding box, or content box.",
            "",
            "If the element has no background-image or background-color, this property will only have a visual effect when the border has transparent regions or partially opaque regions (due to border-style or border-image); otherwise, the border masks the difference.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip",
        ],
    }),
    backgroundColor: property({
        css: "background-color",
        values: [],
        type: COLOR,
        docs: [
            "The background-color CSS property sets the background color of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-color",
        ],
    }),
    backgroundImage: property({
        css: "background-image",
        values: [],
        type: "string",
        docs: [
            "The background-image CSS property sets one or more background images on an element.",
            "",
            "The background images are drawn on stacking context layers on top of each other. The first layer specified is drawn as if it is closest to the user.",
            "",
            "The borders of the element are then drawn on top of them, and the background-color is drawn beneath them. How the images are drawn relative to the box and its borders is defined by the background-clip and background-origin CSS properties.",
            "",
            "If a specified image cannot be drawn (for example, when the file denoted by the specified URI cannot be loaded), browsers handle it as they would a none value.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-image",
        ],
    }),
    backgroundOrigin: property({
        css: "background-origin",
        values: ["border-box", "padding-box", "content-box"],
        type: "string",
        docs: [
            "The background-origin CSS property sets the background's origin: from the border start, inside the border, or inside the padding.",
            "",
            "Note that background-origin is ignored when background-attachment is fixed.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin",
        ],
    }),
    backgroundPosition: property({
        css: "background-position",
        values: ["top", "bottom", "left", "right", "center"],
        type: "string",
        docs: [
            "The background-position CSS property sets the initial position for each background image. The position is relative to the position layer set by background-origin.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-position",
        ],
    }),
    backgroundPositionX: property({
        css: "background-position-x",
        values: ["left", "right", "center"],
        type: "string",
        docs: [
            "The background-position-x CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by background-origin.",
            "",
            "The value of this property is overridden by any declaration of the background or background-position shorthand properties applied to the element after it.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-x",
        ],
    }),
    backgroundPositionY: property({
        css: "background-position-y",
        values: ["top", "center", "bottom"],
        type: "string",
        docs: [
            "The background-position-y CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by background-origin.",
            "",
            "The value of this property is overridden by any declaration of the background or background-position shorthand properties applied to the element after it.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-y",
        ],
    }),
    backgroundRepeat: property({
        css: "background-repeat",
        values: [
            "repeat-x",
            "repeat-y",
            "repeat",
            "space",
            "round",
            "no-repeat",
        ],
        type: "string",
        docs: [
            "The background-repeat CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.",
            "",
            "By default, the repeated images are clipped to the size of the element, but they can be scaled to fit (using round) or evenly distributed from end to end (using space).",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat",
        ],
    }),
    backgroundSize: property({
        css: "background-size",
        values: ["cover", "contain"],
        type: "string",
        docs: [],
        links: [],
    }),
    blockSize: property({
        css: "block-size",
        values: ["max-content", "min-content"],
        type: "string",
        docs: [
            "The background-size CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.",
            "",
            "Spaces not covered by a background image are filled with the background-color property, and the background color will be visible behind background images that have transparency/translucency.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/background-size",
        ],
    }),
    borderBlock: property({
        css: "border-block",
        values: [],
        type: "string",
        docs: [
            "The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.",
            "border-block can be used to set the values for one or more of border-block-width, border-block-style, and border-block-color setting both the start and end in the block dimension at once. The physical borders to which it maps depends on the element's writing mode, directionality, and text orientation. It corresponds to the border-top and border-bottom or border-right, and border-left properties depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block",
        ],
    }),
    borderBlockColor: property({
        css: "border-block-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-color",
        ],
    }),
    borderBlockStyle: property({
        css: "border-block-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        docs: [
            "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-style",
        ],
    }),
    borderBlockWidth: property({
        css: "border-block-width",
        values: ["thick"],
        type: "string",
        docs: [
            "The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-width",
        ],
    }),
    borderBlockEnd: property({
        css: "border-block-end",
        values: [],
        type: "string",
        docs: [
            "The border-block-end CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end",
        ],
    }),
    borderBlockEndColor: property({
        css: "border-block-end-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-block-end-color CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-color",
        ],
    }),
    borderBlockEndStyle: property({
        css: "border-block-end-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        docs: [
            "The border-block-end-style CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-style",
        ],
    }),
    borderBlockEndWidth: property({
        css: "border-block-end-width",
        values: ["thick"],
        type: "string",
        docs: [
            "The border-block-end-width CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-width",
        ],
    }),
    borderBlockStart: property({
        css: "border-block-start",
        values: [],
        type: "string",
        docs: [
            "The border-block-start CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start",
        ],
    }),
    borderBlockStartColor: property({
        css: "border-block-start-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-block-start-color CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-color",
        ],
    }),
    borderBlockStartStyle: property({
        css: "border-block-start-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        docs: [
            "The border-block-start-style CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-style",
        ],
    }),
    borderBlockStartWidth: property({
        css: "border-block-start-width",
        values: ["thick"],
        type: "string",
        docs: [
            "The border-block-start-width CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-width",
        ],
    }),
    border: property({
        css: "border",
        values: [],
        type: "string",
        docs: [
            "The border shorthand CSS property sets an element's border. It sets the values of border-width, border-style, and border-color.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/border"],
    }),
    borderBottom: property({
        css: "border-bottom",
        value: [],
        type: "string",
        docs: [
            "The border-bottom shorthand CSS property sets an element's bottom border. It sets the values of border-bottom-width, border-bottom-style and border-bottom-color.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom",
        ],
    }),
    borderBottomColor: property({
        css: "border-bottom-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-bottom-color CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties border-color or border-bottom.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color",
        ],
    }),
    borderBottomLeftRadius: property({
        css: "border-bottom-left-radius",
        values: [],
        type: "string",
        docs: [
            "The border-bottom-left-radius CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius",
        ],
    }),
    borderBottomRightRadius: property({
        css: "border-bottom-right-radius",
        values: [],
        type: "string",
        docs: [
            "The border-bottom-right-radius CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius",
        ],
    }),
    borderBottomStyle: property({
        css: "border-bottom-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        docs: [
            "The border-bottom-style CSS property sets the line style of an element's bottom border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style",
        ],
    }),
    borderBottomWidth: property({
        css: "border-bottom-width",
        values: ["thin", "medium", "thick"],
        type: "string",
        docs: [
            "The border-bottom-width CSS property sets the width of the bottom border of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width",
        ],
    }),
    borderCollapse: property({
        css: "border-collapse",
        values: ["collapse", "seperate"],
        type: "string",
        docs: [
            "The border-collapse CSS property sets whether cells inside a <table> have shared or separate borders.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse",
        ],
    }),
    borderColor: property({
        css: "border-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-color shorthand CSS property sets the color of an element's border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-color",
        ],
    }),
    borderEndEndRadius: property({
        css: "border-end-end-radius",
        values: [],
        type: "string",
        docs: [
            "The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius",
        ],
    }),
    borderEndStartRadius: property({
        css: "border-end-start-radius",
        values: [],
        type: "string",
        docs: [
            "The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radius",
        ],
    }),
    borderStartEndRadius: property({
        css: "border-start-end-radius",
        values: [],
        type: "string",
        docs: [
            "The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius",
        ],
    }),
    borderStartStartRadius: property({
        css: "border-start-start-radius",
        values: [],
        type: "string",
        docs: [
            "The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radius",
        ],
    }),
    borderImage: property({
        css: "border-image",
        values: [],
        type: "string",
        docs: [
            "The border-image CSS property draws an image around a given element. It replaces the element's regular border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-image",
        ],
    }),
    borderImageOutset: property({
        css: "border-outset",
        values: [],
        type: "string",
        docs: [],
        links: [],
    }),
    borderImageRepeat: property({
        css: "border-image-repeat",
        values: ["stretch", "repeat", "round", "space"],
        type: "string",
        docs: [
            "The border-image-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-repeat",
        ],
    }),
    borderImageSlice: property({
        css: "border-image-slice",
        values: ["fill"],
        type: "string",
        docs: [
            "The border-image-slice CSS property divides the image specified by border-image-source into regions. These regions form the components of an element's border image.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-slice",
        ],
    }),
    borderImageSource: property({
        css: "border-image-source",
        values: [],
        type: "string",
        docs: [
            "The border-image-source CSS property sets the source image used to create an element's border image.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-source",
        ],
    }),
    borderImageWidth: property({
        css: "border-image-width",
        values: [],
        type: "string",
        docs: [
            "The border-image-width CSS property sets the width of an element's border image.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width",
        ],
    }),
    borderInline: property({
        css: "border-inline",
        values: [],
        type: COLOR,
        docs: [
            "The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline",
        ],
    }),
    borderInlineColor: property({
        css: "border-inline-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-color",
        ],
    }),
    borderInlineStyle: property({
        css: "border-inline-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        docs: [
            "The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-style",
        ],
    }),
    borderInlineWidth: property({
        css: "border-inline-width",
        values: [],
        type: "string",
        docs: [
            "The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-width",
        ],
    }),
    borderInlineEnd: property({
        css: "border-inline-end",
        values: [],
        type: "string",
        docs: [
            "The border-inline-end CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end",
        ],
    }),
    borderInlineEndColor: property({
        css: "border-inline-end-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-inline-end-color CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-color",
        ],
    }),
    borderInlineEndStyle: property({
        css: "border-inline-end-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        docs: [
            "The border-inline-end-style CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-style",
        ],
    }),
    borderInlineEndWidth: property({
        css: "border-inline-end-width",
        values: [],
        type: "string",
        docs: [
            "The border-inline-end-width CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width",
        ],
    }),
    borderInlineStart: property({
        css: "border-inline-start",
        values: [],
        type: "string",
        docs: [
            "The border-inline-start CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start",
        ],
    }),
    borderInlineStartColor: property({
        css: "border-inline-start-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-inline-start-color CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-color",
        ],
    }),
    borderInlineStartStyle: property({
        css: "border-inline-start-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        docs: [
            "The border-inline-start-style CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-style",
        ],
    }),
    borderInlineStartWidth: property({
        css: "border-inline-start-width",
        values: [],
        type: "string",
        docs: [
            "The border-inline-start-width CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-width",
        ],
    }),
    borderLeft: property({
        css: "border-left",
        values: [],
        type: "string",
        docs: [
            "The border-left shorthand CSS property sets all the properties of an element's left border.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/border-left"],
    }),
    borderLeftColor: property({
        css: "border-left-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-left-color CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties border-color or border-left.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color",
        ],
    }),
    borderLeftStyle: property({
        css: "border-left-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        docs: [
            "The border-left-style CSS property sets the line style of an element's left border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style",
        ],
    }),
    borderLeftWidth: property({
        css: "border-left-width",
        values: [],
        type: "string",
        docs: [
            "The border-left-width CSS property sets the width of the left border of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width",
        ],
    }),
    borderRadius: property({
        css: "border-radius",
        values: [],
        type: "string",
        docs: [
            "The border-radius CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius",
        ],
    }),
    borderRight: property({
        css: "border-right",
        values: [],
        type: "string",
        docs: [
            "The border-right shorthand CSS property sets all the properties of an element's right border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-right",
        ],
    }),
    borderRightColor: property({
        css: "border-right-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-right-color CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties border-color or border-right.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color",
        ],
    }),
    borderRightStyle: property({
        css: "border-right-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        docs: [
            "The border-right-style CSS property sets the line style of an element's right border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style",
        ],
    }),
    borderRightWidth: property({
        css: "border-right-width",
        values: [],
        type: "string",
        docs: [
            "The border-right-width CSS property sets the width of the right border of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width",
        ],
    }),
    borderSpacing: property({
        css: "border-spacing",
        values: [],
        type: "string",
        docs: [
            "The border-spacing CSS property sets the distance between the borders of adjacent cells in a ``<table>``. This property applies only when border-collapse is separate.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-spacing",
        ],
    }),
    borderStyle: property({
        css: "border-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        docs: [
            "The border-style shorthand CSS property sets the line style for all four sides of an element's border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-style",
        ],
    }),
    borderTop: property({
        css: "border-top",
        values: [],
        type: "string",
        docs: [
            "The border-top shorthand CSS property sets all the properties of an element's top border.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/border-top"],
    }),
    borderTopColor: property({
        css: "border-top-color",
        values: [],
        type: COLOR,
        docs: [
            "The border-top-color CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties border-color or border-top.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color",
        ],
    }),
    borderTopLeftRadius: property({
        css: "border-top-left-radius",
        values: [],
        type: "string",
        docs: [
            "The border-top-left-radius CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius",
        ],
    }),
    borderTopRightRadius: property({
        css: "border-top-right-radius",
        values: [],
        type: "string",
        docs: [
            "The border-top-right-radius CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius",
        ],
    }),
    borderTopStyle: property({
        css: "border-top-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        docs: [
            "The border-top-style CSS property sets the line style of an element's top border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style",
        ],
    }),
    borderTopWidth: property({
        css: "border-top-width",
        values: [],
        type: "string",
        docs: [
            "The border-top-width CSS property sets the width of the top border of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width",
        ],
    }),
    borderWidth: property({
        css: "border-width",
        values: [],
        type: "string",
        docs: [
            "The border-width shorthand CSS property sets the width of an element's border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/border-width",
        ],
    }),
    bottom: property({
        css: "bottom",
        values: ["auto"],
        type: "string",
        docs: [
            "The bottom CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/bottom"],
    }),
    boxDecorationBreak: property({
        css: "box-decoration-break",
        values: ["slice", "clone"],
        type: "string",
        docs: [
            "The box-decoration-break CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/box-decoration-break",
        ],
    }),
    boxShadow: property({
        css: "box-shadow",
        values: ["none"],
        type: "string",
        docs: [
            "The box-shadow CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"],
    }),
    boxSizing: property({
        css: "box-sizing",
        values: ["border-box", "box-sizing"],
        type: "string",
        docs: [
            "The box-sizing CSS property sets how the total width and height of an element is calculated.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing"],
    }),
    breakAfter: property({
        css: "break-after",
        values: [
            "auto",
            "avoid",
            "always",
            "all",
            "avoid-page",
            "page",
            "left",
            "right",
            "recto",
            "verso",
            "avoid-column",
            "column",
            "avoid-region",
            "region",
        ],
        type: "string",
        docs: [
            "The break-after CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/break-after"],
    }),
    breakBefore: property({
        css: "break-before",
        values: [
            "auto",
            "avoid",
            "always",
            "all",
            "avoid-page",
            "page",
            "left",
            "right",
            "recto",
            "verso",
            "avoid-column",
            "column",
            "avoid-region",
            "region",
        ],
        type: "string",
        docs: [
            "The break-before CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/break-before",
        ],
    }),
    breakInside: property({
        css: "break-inside",
        values: ["auto", "avoid", "avoid-page", "avoid-column", "avoid-region"],
        type: "string",
        docs: [
            "The break-inside CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/break-inside",
        ],
    }),
    captionSide: property({
        css: "caption-side",
        values: [
            "top",
            "bottom",
            "block-start",
            "block-end",
            "inline-start",
            "inline-end",
        ],
        type: "string",
        docs: [
            "The caption-side CSS property puts the content of a table's <caption> on the specified side. The values are relative to the writing-mode of the table.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side",
        ],
    }),
    caretColor: property({
        css: "caret-color",
        values: ["auto", "transparent", "currentcolor"],
        type: COLOR,
        docs: [
            "The caret-color CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. This is sometimes referred to as the text input cursor. The caret appears in elements such as <input> or those with the contenteditable attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/caret-color"],
    }),
    clear: property({
        css: "clear",
        values: ["none", "left", "right", "both", "inline-start", "inline-end"],
        type: "string",
        docs: [
            "The clear CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The clear property applies to floating and non-floating elements.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/clear"],
    }),
    clip: property({
        css: "clip",
        values: ["auto"],
        type: "string",
        docs: [
            "The clip CSS property defines a visible portion of an element. The clip property applies only to absolutely positioned elements — that is, elements with position:absolute or position:fixed.",
        ],
        decorators: ["deprecated"],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/clip"],
    }),
    clipPath: property({
        css: "clip-path",
        values: [
            "none",
            "margin-box",
            "border-box",
            "padding-box",
            "content-box",
            "fill-box",
            "stroke",
            "view-box",
        ],
        type: "string",
        docs: [
            "The clip-path CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path"],
    }),
    color: property({
        css: "color",
        values: [],
        type: COLOR,
        docs: [
            "The color CSS property sets the foreground color value of an element's text and text decorations, and sets the currentcolor value. currentcolor may be used as an indirect value on other properties and is the default for other color properties, such as border-color.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/color"],
    }),
    colorAdjust: property({
        css: "print-color-adjust",
        values: [],
        type: "string",
        docs: [
            "The print-color-adjust CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/print-color-adjust",
        ],
    }),
    colorScheme: property({
        css: "color-scheme",
        values: ["normal", "light", "dark"],
        type: "string",
        docs: [],
        links: [],
    }),
    columnCount: property({
        css: "column-count",
        values: ["auto"],
        type: "string",
        docs: [
            "The color-scheme CSS property allows an element to indicate which color schemes it can comfortably be rendered in.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme",
        ],
    }),
    columnFill: property({
        css: "column-fill",
        values: ["auto", "balance", "balance-all"],
        type: "string",
        docs: [],
        links: [],
    }),
    columnGap: property({
        css: "column-gap",
        values: ["normal"],
        type: "string",
        docs: [
            "The column-fill CSS property controls how an element's contents are balanced when broken into columns.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/column-fill"],
    }),
    columnRule: property({
        css: "column-rule",
        values: [],
        type: "string",
        docs: [
            "The column-rule shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule"],
    }),
    columnRuleColor: property({
        css: "column-rule-color",
        values: [],
        type: COLOR,
        docs: [
            "The column-rule-color CSS property sets the color of the line drawn between columns in a multi-column layout.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-color",
        ],
    }),
    columnRuleStyle: property({
        css: "column-rule-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        docs: [
            "The column-rule-style CSS property sets the style of the line drawn between columns in a multi-column layout.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-style",
        ],
    }),
    columnRuleWidth: property({
        css: "column-rule-width",
        values: ["thin", "medium", "thick"],
        type: "string",
        docs: [
            "The column-rule-width CSS property sets the width of the line drawn between columns in a multi-column layout.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-width",
        ],
    }),
    columnSpan: property({
        css: "column-span",
        values: ["none", "all"],
        type: "string",
        docs: [
            "The column-span CSS property makes it possible for an element to span across all columns when its value is set to all.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/column-span"],
    }),
    columnWidth: property({
        css: "column-width",
        values: ["auto"],
        type: "string",
        docs: [
            "The column-width CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the column-width value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/column-width",
        ],
    }),
    columns: property({
        css: "columns",
        values: ["auto"],
        type: "string",
        docs: [
            "The columns CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/columns"],
    }),
    contain: property({
        css: "contain",
        values: [
            "none",
            "strict",
            "content",
            "size",
            "layout",
            "style",
            "paint",
        ],
        type: "string",
        docs: [
            "The contain CSS property allows an author to indicate that an element and its contents are, as much as possible, independent of the rest of the document tree. Containment allows the browser to calculate layout, style, paint, size, or any combination of them for a specific area of the DOM. Changes within an element with containment applied are not propagated outside of the contained element to the rest of the page, leading to performance benefits through fewer DOM re-renders.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/contain"],
    }),
    content: property({
        css: "content",
        values: [
            "normal",
            "none",
            "open-quote",
            "close-quote",
            "no-open-quote",
            "no-close-quote",
        ],
        type: "string",
        docs: [
            "The content CSS property replaces an element with a generated value. Objects inserted using the content property are anonymous replaced elements.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/content"],
    }),
    contentVisibility: property({
        css: "content-visibility",
        values: ["visible", "hidden", "auto"],
        type: "string",
        docs: [
            "The content-visibility CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. Basically it enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility",
        ],
    }),
    counterIncrement: property({
        css: "counter-increment",
        values: [],
        type: "string",
        docs: [
            "The counter-increment CSS property increases or decreases the value of a CSS counter by a given value.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/counter-increment",
        ],
    }),
    counterReset: property({
        css: "counter-reset",
        values: [],
        type: "string",
        docs: [
            "The counter-reset CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/counter-reset",
        ],
    }),
    counterSet: property({
        css: "counter-set",
        values: [],
        type: "string",
        docs: [
            "The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/counter-set"],
    }),
    cursor: property({
        css: "cursor",
        values: [
            "auto",
            "default",
            "none",
            "context-menu",
            "help",
            "pointer",
            "progress",
            "wait",
            "cell",
            "crosshair",
            "text",
            "vertical-text",
            "alias",
            "move",
            "no-drop",
            "not-allowed",
            "grab",
            "grabbing",
            "n-resize",
            "e-resize",
            "w-resize",
            "ne-resize",
            "nw-resize",
            "se-resize",
            "sw-resize",
            "ew-resize",
            "ns-resize",
            "ns-resize",
            "nesw-resize",
            "nwse-resize",
            "zoom-in",
            "zoom-out",
        ],
        type: "string",
        docs: [
            "The cursor CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/cursor"],
    }),
    direction: property({
        css: "direction",
        values: ["ltr", "rtl"],
        type: "string",
        docs: [
            "The direction CSS property sets the direction of text, table columns, and horizontal overflow. Use rtl for languages written from right to left (like Hebrew or Arabic), and ltr for those written from left to right (like English and most other languages).",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/direction"],
    }),
    display: property({
        css: "display",
        values: [
            "block",
            "inline",
            "inline-block",
            "flex",
            "inline-flex",
            "grid",
            "inline-grid",
            "flow-root",
            "none",
            "contents",
            "table",
            "table-row",
        ],
        type: "string",
        docs: [
            "The display CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/display"],
    }),
    emptyCells: property({
        css: "empty-cells",
        values: ["show", "hide"],
        type: "string",
        docs: [
            "The empty-cells CSS property sets whether borders and backgrounds appear around <table> cells that have no visible content.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/empty-cells"],
    }),
    filter: property({
        css: "filter",
        values: ["none"],
        type: "string",
        docs: [
            "The filter CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/filter"],
    }),
    flex: property({
        css: "flex",
        values: ["auto", "none"],
        type: "string",
        docs: [
            "The flex CSS shorthand property sets how a flex item will grow or shrink to fit the space available in its flex container.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/flex"],
    }),
    flexBasis: property({
        css: "flex-basis",
        values: ["max-content", "min-content", "fit-content", "auto"],
        type: "string",
        docs: [
            "The flex-basis CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with box-sizing.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis"],
    }),
    flexDirection: property({
        css: "flex-direction",
        values: ["row", "row-reverse", "column", "column-reverse"],
        type: "string",
        docs: [
            "The flex-direction CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction",
        ],
    }),
    flexFlow: property({
        css: "flex-flow",
        values: [],
        type: "string",
        docs: [
            "The flex-flow CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow"],
    }),
    flexGrow: property({
        css: "flex-grow",
        values: [],
        type: "string",
        docs: [
            "The flex-grow CSS property sets the flex grow factor of a flex item's main size.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow"],
    }),
    flexShrink: property({
        css: "flex-shrink",
        values: [],
        type: "string",
        docs: [
            "The flex-shrink CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to flex-shrink.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink"],
    }),
    flexWrap: property({
        css: "flex-wrap",
        values: ["nowrap", "wrap", "wrap-reverse"],
        type: "string",
        docs: [
            "The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap"],
    }),
    float: property({
        css: "float",
        values: ["left", "right", "none", "inline-start", "inline-end"],
        type: "string",
        docs: [
            "The float CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/float"],
    }),
    font: property({
        css: "font",
        values: [],
        type: "string",
        docs: [
            "The font CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/font"],
    }),
    fontFamily: property({
        css: "font-family",
        values: [
            "serif",
            "sans-serif",
            "monospace",
            "cursive",
            "fantasy",
            "system-ui",
            "ui-serif",
            "ui-sans-serif",
            "ui-monospace",
            "ui-rounded",
            "emoji",
            "math",
            "fangsong",
        ],
        type: "string",
        docs: [
            "The font-family CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/font-family"],
    }),
    fontFeatureSettings: property({
        css: "font-feature-settings",
        values: [],
        type: "string",
        docs: [
            "The font-feature-settings CSS property controls advanced typographic features in OpenType fonts.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings",
        ],
    }),
    fontKerning: property({
        css: "font-kerning",
        values: ["auto", "normal", "none"],
        type: "string",
        docs: [
            "The font-kerning CSS property sets the use of the kerning information stored in a font.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-kerning",
        ],
    }),
    fontSize: property({
        css: "font-size",
        values: [
            "xx-small",
            "x-small",
            "small",
            "medium",
            "large",
            "x-large",
            "xx-large",
            "xxx-large",
        ],
        type: "string",
        docs: [
            "The font-size CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative <length> units, such as em, ex, and so forth.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"],
    }),
    fontSizeAdjust: property({
        css: "font-size-adjust",
        values: ["none"],
        type: "string",
        docs: [
            "The font-size-adjust CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust",
        ],
    }),
    fontStretch: property({
        css: "font-stretch",
        values: [
            "ultra-condensed",
            "extra-condensed",
            "condensed",
            "semi-condensed",
            "normal",
            "semi-expanded",
            "expanded",
            "extra-expanded",
            "ultra-expanded",
        ],
        type: "string",
        docs: [
            "The font-stretch CSS property selects a normal, condensed, or expanded face from a font.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-stretch",
        ],
    }),
    fontStyle: property({
        css: "font-style",
        values: ["normal", "italic", "oblique"],
        type: "string",
        docs: [
            "The font-style CSS property sets whether a font should be styled with a normal, italic, or oblique face from its font-family.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/font-style"],
    }),
    fontSynthesis: property({
        css: "font-synthesis",
        values: ["none", "weight", "style", "small-caps"],
        type: "string",
        docs: [
            "The font-synthesis CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis",
        ],
    }),
    fontVariant: property({
        css: "font-variant",
        values: [],
        type: "string",
        docs: [
            "The font-variant CSS shorthand property allows you to set all the font variants for a font.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant",
        ],
    }),
    fontVariantAlternates: property({
        css: "font-variant-alternates",
        values: [],
        type: "string",
        docs: [
            "The font-variant-alternates CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in @font-feature-values.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-alternates",
        ],
    }),
    fontVariantCaps: property({
        css: "font-variant-caps",
        values: [],
        type: "string",
        docs: [
            "The font-variant-caps CSS property controls the use of alternate glyphs for capital letters.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-caps",
        ],
    }),
    fontVariantEastAsian: property({
        css: "font-variant-east-asian",
        values: [],
        type: "string",
        docs: [
            "The font-variant-east-asian CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-east-asian",
        ],
    }),
    fontVariantLigatures: property({
        css: "font-variant-ligatures",
        values: [],
        type: "string",
        docs: [
            "The font-variant-ligatures CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatures",
        ],
    }),
    fontVariantNumeric: property({
        css: "font-variant-numeric",
        values: [],
        type: "string",
        docs: [
            "The font-variant-numeric CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric",
        ],
    }),
    fontVariantPosition: property({
        css: "font-variant-position",
        values: [],
        type: "string",
        docs: [
            "The font-variant-position CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-position",
        ],
    }),
    fontVariantSettings: property({
        css: "font-variant-settings",
        values: [],
        type: "string",
        docs: [],
        links: [],
    }),
    fontWeight: property({
        css: "font-weight",
        values: [
            "normal",
            "bold",
            "lighter",
            "bolder",
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700",
            "800",
            "900",
        ],
        type: "string",
        docs: [
            "The font-weight CSS property sets the weight (or boldness) of the font. The weights available depend on the font-family that is currently set.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight"],
    }),
    forcedColorAdjust: property({
        css: "forced-color-adjust",
        values: ["auto", "none"],
        type: COLOR,
        docs: [
            "The forced-color-adjust CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/forced-color-adjust",
        ],
    }),
    gap: property({
        css: "gap",
        values: [],
        type: "string",
        docs: [],
        links: [],
    }),
    grid: property({
        css: "grid",
        values: ["none"],
        type: "string",
        docs: [
            "The gap CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for row-gap and column-gap.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/gap"],
    }),
    gridArea: property({
        css: "grid-area",
        values: [],
        type: "string",
        docs: [
            "The grid-area CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area"],
    }),
    gridAutoColumns: property({
        css: "grid-auto-columns",
        values: ["in-content", "max-content", "auto"],
        type: "string",
        docs: [
            "The grid-auto-columns CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns",
        ],
    }),
    gridAutoFlow: property({
        css: "grid-auto-flow",
        values: ["row", "column", "dense"],
        type: "string",
        docs: [
            "The grid-auto-flow CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow",
        ],
    }),
    gridAutoRows: property({
        css: "grid-auto-rows",
        values: ["min-content", "max-content", "auto"],
        type: "string",
        docs: [
            "The grid-auto-rows CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows",
        ],
    }),
    gridColumn: property({
        css: "grid-column",
        values: ["auto"],
        type: "string",
        docs: [
            "The grid-column CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column"],
    }),
    gridColumnEnd: property({
        css: "grid-column-end",
        values: ["auto"],
        type: "string",
        docs: [
            "The grid-column-end CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end",
        ],
    }),
    gridColumnGap: property({
        css: "grid-column-gap",
        values: ["auto"],
        type: "string",
        docs: [
            "The column-gap CSS property sets the size of the gap (gutter) between an element's columns.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap"],
    }),
    gridColumnStart: property({
        css: "grid-column-start",
        values: [],
        type: "string",
        docs: [
            "The grid-column-start CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start",
        ],
    }),
    gridGap: property({
        css: "grid-gap",
        values: [],
        type: "string",
        docs: [
            "The gap CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for row-gap and column-gap.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/gap"],
    }),
    gridRow: property({
        css: "grid-row",
        values: ["auto"],
        type: "string",
        docs: [
            "The grid-row CSS shorthand property specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row"],
    }),
    gridRowEnd: property({
        css: "grid-row-end",
        values: ["auto"],
        type: "string",
        docs: [
            "The grid-row-end CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end",
        ],
    }),
    gridRowGap: property({
        css: "grid-row-gap",
        values: ["auto"],
        type: "string",
        docs: [
            "The row-gap CSS property sets the size of the gap (gutter) between an element's rows.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap"],
    }),
    gridRowStart: property({
        css: "grid-row-start",
        values: [],
        type: "string",
        docs: [
            "The grid-row-start CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start",
        ],
    }),
    gridTemplate: property({
        css: "grid-template",
        values: ["none"],
        type: "string",
        docs: [
            "The grid-template CSS property is a shorthand property for defining grid columns, rows, and areas.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template",
        ],
    }),
    gridTemplateAreas: property({
        css: "grid-template-areas",
        values: ["none"],
        type: "string",
        docs: [
            "The grid-template-areas CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas",
        ],
    }),
    gridTemplateColumns: property({
        css: "grid-template-columns",
        values: ["none"],
        type: "string",
        docs: [
            "The grid-template-columns CSS property defines the line names and track sizing functions of the grid columns.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns",
        ],
    }),
    gridTemplateRows: property({
        css: "grid-template-rows",
        values: ["none"],
        type: "string",
        docs: [
            "The grid-template-rows CSS property defines the line names and track sizing functions of the grid rows.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows",
        ],
    }),
    hangingPunctuation: property({
        css: "hanging-punctuation",
        values: ["none", "first", "last", "force-end", "allow-end"],
        type: "string",
        docs: [
            "The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/hanging-punctuation",
        ],
    }),
    height: property({
        css: "height",
        values: ["max-content", "min-content", "auto"],
        type: "string",
        docs: [
            "The height CSS property specifies the height of an element. By default, the property defines the height of the content area. If box-sizing is set to border-box, however, it instead determines the height of the border area.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/height"],
    }),
    hyphens: property({
        css: "hyphens",
        values: ["none", "manual", "auto"],
        type: "string",
        support: ["-webkit-hyphens", "-moz-hyphens", "-ms-hyphens"],
        docs: [
            "The hyphens CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens"],
    }),
    isolation: property({
        css: "isolation",
        values: ["auto", "isolate"],
        type: "string",
        docs: [
            "The isolation CSS property determines whether an element must create a new stacking context.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/isolation"],
    }),
    imageOrientation: property({
        css: "image-orientation",
        values: ["none", "from-image"],
        type: "string",
        docs: [
            "The image-orientation CSS property specifies a layout-independent correction to the orientation of an image.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation",
        ],
    }),
    imageRendering: property({
        css: "image-rendering",
        values: ["auto", "crisp-edge", "pixelated"],
        type: "string",
        docs: [
            "The image-rendering CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering",
        ],
    }),
    imageResolution: property({
        css: "image-resolution",
        values: ["from-image"],
        type: "string",
        docs: [
            "The image-resolution CSS property specifies the intrinsic resolution of all raster images used in or on the element. It affects content images such as replaced elements and generated content, and decorative images such as background-image images.",
        ],
        decorators: ["experimental"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/image-resolution",
        ],
    }),
    initialLetter: property({
        css: "initial-letter",
        values: ["normal"],
        type: "string",
        docs: [
            "The initial-letter CSS property sets styling for dropped, raised, and sunken initial letters.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/initial-letter",
        ],
    }),
    inlineSize: property({
        css: "inline-size",
        values: ["auto", "max-content", "min-content"],
        type: "string",
        docs: [
            "The inline-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size"],
    }),
    inset: property({
        css: "inset",
        values: ["auto"],
        type: "string",
        docs: [
            "The inset CSS property is a shorthand that corresponds to the top, right, bottom, and/or left properties. It has the same multi-value syntax of the margin shorthand.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/inset"],
    }),
    insetBlock: property({
        css: "inset-inline",
        values: ["auto"],
        type: "string",
        docs: [
            "The inset-inline CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline",
        ],
    }),
    insetBlockStart: property({
        css: "inset-block-start",
        values: ["auto"],
        type: "string",
        docs: [
            "The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block-start",
        ],
    }),
    insetInlineStart: property({
        css: "inset-inline-start",
        values: ["auto"],
        type: "string",
        docs: [
            "The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-start",
        ],
    }),
    justifyContent: property({
        css: "justify-content",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "left",
            "right",
            "normal",
            "space-between",
            "space-around",
            "stretch",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        docs: [
            "The CSS justify-content property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content",
        ],
    }),
    justifyItems: property({
        css: "justify-items",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "left",
            "right",
            "normal",
            "space-between",
            "space-around",
            "stretch",
            "safe center",
            "unsafe center",
            "self-start",
            "self-end",
            "baseline",
            "first baseline",
            "last baseline",
            "legacy right",
            "legacy left",
            "legacy center",
        ],
        type: "string",
        docs: [
            "The CSS justify-items property defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items",
        ],
    }),
    justifySelf: property({
        css: "justify-self",
        values: [
            "auto",
            "normal",
            "stretch",
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "self-start",
            "self-end",
            "left",
            "right",
            "baseline",
            "first baseline",
            "last baseline",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        docs: [
            "The CSS justify-self property sets the way a box is justified inside its alignment container along the appropriate axis.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self",
        ],
    }),
    left: property({
        css: "left",
        values: ["auto"],
        type: "string",
        docs: [
            "The left CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/left"],
    }),
    letterSpacing: property({
        css: "letter-spacing",
        values: ["normal"],
        type: "string",
        docs: [
            "The letter-spacing CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of letter-spacing causes characters to spread farther apart, while negative values of letter-spacing bring characters closer together.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing",
        ],
    }),
    lineHeight: property({
        css: "line-height",
        values: ["normal"],
        type: "string",
        docs: [
            "The line-height CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/line-height"],
    }),
    lineBreak: property({
        css: "line-break",
        values: ["auto", "loose", "normal", "strict", "anywhere"],
        type: "string",
        docs: [
            "The line-break CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/line-break"],
    }),
    listStyle: property({
        css: "list-style",
        values: [],
        type: "string",
        docs: [
            "The list-style CSS shorthand property allows you to set all the list style properties at once.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/list-style"],
    }),
    listStyleImage: property({
        css: "list-style-image",
        values: ["none"],
        type: "string",
        docs: [
            "The list-style-image CSS property sets an image to be used as the list item marker.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-image",
        ],
    }),
    listStylePosition: property({
        css: "list-style-position",
        values: ["inside", "outside"],
        type: "string",
        docs: [
            "The list-style-position CSS property sets the position of the ::marker relative to a list item.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position",
        ],
    }),
    listStyleType: property({
        css: "list-style-type",
        values: [
            "none",
            "disc",
            "circle",
            "square",
            "decimal",
            "georgian",
            "trad-chinese-informal",
            "kannada",
            "decimal-leading-zero",
            "lower-roman",
            "upper-roman",
            "lower-greek",
            "lower-alpha",
            "upper-alpha",
            "armenian",
            "bengali",
            "cambodian",
            "devanagari",
            "gujarati",
            "kannada",
            "lao",
            "malayalam",
            "myanmar",
            "oriya",
            "telugu",
        ],
        type: "string",
        docs: [
            "The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type",
        ],
    }),
    margin: property({
        css: "margin",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin CSS shorthand property sets the margin area on all four sides of an element.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/margin"],
    }),
    marginBlock: property({
        css: "margin-block",
        values: [],
        type: "string",
        docs: [
            "The margin-block CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block",
        ],
    }),
    marginBlockEnd: property({
        css: "margin-block-end",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-block-end CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end",
        ],
    }),
    marginBlockStart: property({
        css: "margin-block-start",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-block-start CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start",
        ],
    }),
    marginBottom: property({
        css: "margin-bottom",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-bottom CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom",
        ],
    }),
    marginInline: property({
        css: "margin-inline",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-inline CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline",
        ],
    }),
    marginInlineEnd: property({
        css: "margin-inline-end",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-inline-end CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the margin-top, margin-right, margin-bottom or margin-left property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end",
        ],
    }),
    marginInlineStart: property({
        css: "margin-inline-start",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-inline-start CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the margin-top, margin-right, margin-bottom, or margin-left property depending on the values defined for writing-mode, direction, and text-orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start",
        ],
    }),
    marginLeft: property({
        css: "margin-left",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left"],
    }),
    marginRight: property({
        css: "margin-right",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right",
        ],
    }),
    marginTop: property({
        css: "margin-top",
        values: ["auto"],
        type: "string",
        docs: [
            "The margin-top CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top"],
    }),
    mask: property({
        css: "mask",
        values: ["none"],
        type: "string",
        docs: [
            "The mask CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask"],
    }),
    maskBorder: property({
        css: "mask-border",
        values: [],
        type: "string",
        docs: [
            "The mask-border CSS shorthand property lets you create a mask along the edge of an element's border.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border"],
    }),
    maskBorderMode: property({
        css: "mask-border-mode",
        values: ["luminance", "alpha"],
        type: "string",
        docs: [
            "The mask-border-mode CSS property specifies the blending mode used in a mask border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-mode",
        ],
    }),
    maskBorderOutset: property({
        css: "mask-border-outset",
        values: [],
        type: "string",
        docs: [
            "The mask-border-outset CSS property specifies the distance by which an element's mask border is set out from its border box.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-outset",
        ],
    }),
    maskBorderRepeat: property({
        css: "mask-border-repeat",
        values: ["stretch", "repeat", "round", "space"],
        type: "string",
        docs: [
            "The mask-border-repeat CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-repeat",
        ],
    }),
    maskBorderSlice: property({
        css: "mask-border-slice",
        values: [],
        type: "string",
        docs: [
            "The mask-border-slice CSS property divides the image set by mask-border-source into regions. These regions are used to form the components of an element's mask border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-slice",
        ],
    }),
    maskBorderSource: property({
        css: "mask-border-source",
        values: ["none"],
        type: "string",
        docs: [
            "The mask-border-source CSS property sets the source image used to create an element's mask border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-source",
        ],
    }),
    maskBorderWidth: property({
        css: "mask-border-width",
        values: ["auto"],
        type: "string",
        docs: [
            "The mask-border-width CSS property sets the width of an element's mask border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-width",
        ],
    }),
    maskClip: property({
        css: "mask-clip",
        values: [
            "content-box",
            "padding-box",
            "border-box",
            "margin-box",
            "fill-box",
            "stroke-box",
            "view-box",
            "no-clip",
        ],
        type: "string",
        docs: [
            "The mask-clip CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask-clip"],
    }),
    maskComposite: property({
        css: "mask-composite",
        values: ["add", "subtract", "intersect", "exclude"],
        type: "string",
        docs: [
            "The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mask-composite",
        ],
    }),
    maskImage: property({
        css: "mask-image",
        values: ["none"],
        type: "string",
        docs: [
            "The mask-image CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the mask-mode property.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image"],
    }),
    maskMode: property({
        css: "mask-mode",
        values: ["alpha", "luminance", "match-source"],
        type: "string",
        docs: [
            "The mask-mode CSS property sets whether the mask reference defined by mask-image is treated as a luminance or alpha mask.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask-mode"],
    }),
    maskOrigin: property({
        css: "mask-origin",
        values: [
            "content-box",
            "padding-box",
            "border-box",
            "margin-box",
            "fill-box",
            "stroke-box",
            "view-box",
            "content",
            "padding",
            "border",
        ],
        type: "string",
        docs: ["The mask-origin CSS property sets the origin of a mask."],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask-origin"],
    }),
    maskPosition: property({
        css: "mask-position",
        values: ["top", "bottom", "left", "right", "center"],
        type: "string",
        docs: [
            "The mask-position CSS property sets the initial position, relative to the mask position layer set by mask-origin, for each defined mask image.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mask-position",
        ],
    }),
    maskRepeat: property({
        css: "mask-repeat",
        values: [
            "repeat-x",
            "repeat-y",
            "repeat",
            "space",
            "round",
            "no-repeat",
        ],
        type: "string",
        docs: [
            "The mask-repeat CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask-repeat"],
    }),
    maskSize: property({
        css: "mask-size",
        values: ["cover", "contain"],
        type: "string",
        docs: [
            "The mask-size CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask-size"],
    }),
    maskType: property({
        css: "mask-type",
        values: ["alpha", "luminance"],
        type: "string",
        docs: [
            "The mask-type CSS property sets whether an SVG <mask> element is used as a luminance or an alpha mask. It applies to the <mask> element itself.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/mask-type"],
    }),
    mathStyle: property({
        css: "math-style",
        values: ["normal", "compact"],
        type: "string",
        docs: [
            "The math-style property indicates whether MathML equations should render with normal or compact height.",
            "",
        ],
        decorators: ["experimental"],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/math-style"],
    }),
    maxBlockSize: property({
        css: "max-block-size",
        values: ["none", "max-content", "min-content"],
        type: "string",
        docs: [
            "The max-block-size CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by writing-mode. That is, if the writing direction is horizontal, then max-block-size is equivalent to max-height; if the writing direction is vertical, max-block-size is the same as max-width.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/max-block-size",
        ],
    }),
    maxInlineSize: property({
        css: "max-inline-size",
        values: ["none", "max-content", "min-content"],
        type: "string",
        docs: [
            "The max-inline-size CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the max-width or the max-height property, depending on the value of writing-mode.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/max-inline-size",
        ],
    }),
    minBlockSize: property({
        css: "min-block-size",
        values: ["none", "max-content", "min-content"],
        type: "string",
        docs: [
            "The min-block-size CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/min-block-size",
        ],
    }),
    minInlineSize: property({
        css: "min-inline-size",
        values: ["none", "max-content", "min-content"],
        type: "string",
        docs: [
            "The min-inline-size CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/min-inline-size",
        ],
    }),
    maxHeight: property({
        css: "max-height",
        values: ["none", "max-content", "min-content"],
        type: "string",
        docs: [
            "The max-height CSS property sets the maximum height of an element. It prevents the used value of the height property from becoming larger than the value specified for max-height.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/max-height"],
    }),
    maxWidth: property({
        css: "max-width",
        values: ["none", "max-content", "min-content"],
        type: "string",
        docs: [
            "The max-width CSS property sets the maximum width of an element. It prevents the used value of the width property from becoming larger than the value specified by max-width.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/max-width"],
    }),
    minHeight: property({
        css: "min-height",
        values: ["none", "max-content", "min-content"],
        type: "string",
        docs: [
            "The min-height CSS property sets the minimum height of an element. It prevents the used value of the height property from becoming smaller than the value specified for min-height.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/min-height"],
    }),
    minWidth: property({
        css: "min-width",
        values: ["none", "max-content", "min-content"],
        type: "string",
        docs: [
            "The min-width CSS property sets the minimum width of an element. It prevents the used value of the width property from becoming smaller than the value specified for min-width.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/min-width"],
    }),
    mixBlendMode: property({
        css: "mix-blend-mode",
        values: [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "darken",
            "lighten",
            "color-dodge",
            "color-burn",
            "hard-light",
            "soft-light",
            "difference",
            "exclusion",
            "hue",
            "saturation",
            "color",
            "luminosity",
        ],
        type: "string",
        docs: [
            "The mix-blend-mode CSS property sets how an element's content should blend with the content of the element's parent and the element's background.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode",
        ],
    }),
    objectFit: property({
        css: "object-fit",
        values: ["contain", "cover", "fill", "none", "scale-down"],
        type: "string",
        docs: [
            "The object-fit CSS property sets how the content of a replaced element, such as an <img> or <video>, should be resized to fit its container.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit"],
    }),
    objectPosition: property({
        css: "object-position",
        values: ["top", "bottom", "left", "right", "center"],
        type: "string",
        docs: [
            "The object-position CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/object-position",
        ],
    }),
    offset: property({
        css: "offset",
        values: ["none", "auto"],
        type: "string",
        docs: [
            "The offset CSS shorthand property sets all the properties required for animating an element along a defined path.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/offset"],
    }),
    offsetAnchor: property({
        css: "offset-anchor",
        values: ["top", "bottom", "left", "right", "center", "auto"],
        type: "string",
        docs: [
            "The offset-anchor CSS property specifies the point inside the box of an element traveling along an offset-path that is actually moving along the path.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/offset-anchor",
        ],
    }),
    offsetDistance: property({
        css: "offset-distance",
        values: [],
        type: "string",
        docs: [
            "The offset-distance CSS property specifies a position along an offset-path for an element to be placed.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/offset-distance",
        ],
    }),
    offsetPath: property({
        css: "offset-path",
        values: ["none", "margin-box", "stroke-box"],
        type: "string",
        docs: [
            "The offset-path CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path"],
    }),
    offsetPosition: property({
        css: "offset-position",
        values: ["top", "bottom", "left", "right", "center", "auto"],
        type: "string",
        docs: [
            "The offset-position CSS property defines the initial position of the offset-path.",
        ],
        decorators: ["experimental"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/offset-position",
        ],
    }),
    offsetRotate: property({
        css: "offset-rotate",
        values: ["auto"],
        type: "string",
        docs: [
            "The offset-rotate CSS property defines the orientation/direction of the element as it is positioned along the offset-path.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/offset-rotate",
        ],
    }),
    opacity: property({
        css: "opacity",
        values: [],
        type: "string",
        docs: [
            "The opacity CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/opacity"],
    }),
    order: property({
        css: "order",
        values: [],
        type: "string",
        docs: [
            "The order CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/order"],
    }),
    orphans: property({
        css: "orphans",
        values: [],
        type: "string",
        docs: [
            "The orphans CSS property sets the minimum number of lines in a block container that must be shown at the bottom of a page, region, or column.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/orphans"],
    }),
    outline: property({
        css: "outline",
        values: [],
        type: "string",
        docs: [
            "The outline CSS shorthand property sets most of the outline properties in a single declaration.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/outline"],
    }),
    outlineColor: property({
        css: "outline-color",
        values: [],
        type: COLOR,
        docs: [
            "The outline-color CSS property sets the color of an element's outline.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/outline-color",
        ],
    }),
    outlineOffset: property({
        css: "outline-offset",
        values: [],
        type: "string",
        docs: [
            "The outline-offset CSS property sets the amount of space between an outline and the edge or border of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/outline-offset",
        ],
    }),
    outlineStyle: property({
        css: "outline-style",
        values: [
            "auto",
            "none",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        docs: [
            "The outline-style CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/outline-style",
        ],
    }),
    outlineWidth: property({
        css: "outline-width",
        values: ["thin", "medium", "thick"],
        type: "string",
        docs: [
            "The CSS outline-width property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the border.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/outline-width",
        ],
    }),
    overflow: property({
        css: "overflow",
        values: ["visible", "hidden", "clip", "scroll", "auto"],
        type: "string",
        docs: [
            "The overflow CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/overflow"],
    }),
    overflowAnchor: property({
        css: "overflow-anchor",
        values: ["auto", "none"],
        type: "string",
        docs: [
            "The overflow-anchor CSS property provides a way to opt out of the browser's scroll anchoring behavior, which adjusts scroll position to minimize content shifts.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor",
        ],
    }),
    overflowBlock: property({
        css: "overflow-block",
        values: ["visible", "hidden", "scroll", "auto"],
        type: "string",
        docs: [
            "The overflow-block CSS property sets what shows when content overflows the block start and block end edges of a box. This may be nothing, a scroll bar, or the overflow content.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-block",
        ],
    }),
    overflowClipMargin: property({
        css: "overflow-clip-margin",
        values: [],
        type: "string",
        docs: [
            "The overflow-clip-margin CSS property determines how far outside its bounds an element with overflow: clip may be painted before being clipped.",
        ],
        decorators: ["experimental"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-margin",
        ],
    }),
    overflowInline: property({
        css: "overflow-inline",
        values: ["visible", "hidden", "scroll", "auto"],
        type: "string",
        docs: [
            "The overflow-inline CSS property sets what shows when content overflows the inline start and end edges of a box. This may be nothing, a scroll bar, or the overflow content.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-inline",
        ],
    }),
    overflowWrap: property({
        css: "overflow-wrap",
        values: ["normal", "break-word", "anywhere"],
        type: "string",
        docs: [
            "The overflow-wrap CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap",
        ],
    }),
    overflowX: property({
        css: "overflow-x",
        values: ["visible", "hidden", "clip", "scroll", "auto"],
        type: "string",
        docs: [
            "The overflow-x CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x"],
    }),
    overflowY: property({
        css: "overflow-y",
        values: ["visible", "hidden", "clip", "scroll", "auto"],
        type: "string",
        docs: [
            "The overflow-y CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y"],
    }),
    overscrollBehavior: property({
        css: "overscroll-behavior",
        values: ["auto", "contain", "none"],
        type: "string",
        docs: [
            "The overscroll-behavior CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for overscroll-behavior-x and overscroll-behavior-y.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior",
        ],
    }),
    overscrollBehaviorBlock: property({
        css: "overscroll-behavior-block",
        values: ["auto", "contain", "none"],
        type: "string",
        docs: [
            "The overscroll-behavior-block CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-block",
        ],
    }),
    overscrollBehaviorInline: property({
        css: "overscroll-behavior-inline",
        values: ["auto", "contain", "none"],
        type: "string",
        docs: [
            "The overscroll-behavior-inline CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-inline",
        ],
    }),
    overscrollBehaviorX: property({
        css: "overscroll-behavior-x",
        values: ["auto", "contain", "none"],
        type: "string",
        docs: [
            "The overscroll-behavior-x CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-x",
        ],
    }),
    overscrollBehaviorY: property({
        css: "overscroll-behavior-y",
        values: ["auto", "contain", "none"],
        type: "string",
        docs: [
            "The overscroll-behavior-y CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-y",
        ],
    }),
    right: property({
        css: "right",
        values: ["auto"],
        type: "string",
        docs: [
            "The right CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/right"],
    }),
    padding: property({
        css: "padding",
        values: [],
        type: "string",
        docs: [
            "The padding CSS shorthand property sets the padding area on all four sides of an element at once.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/padding"],
    }),
    paddingBlock: property({
        css: "padding-block",
        values: [],
        type: "string",
        docs: [
            "The padding-block CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block",
        ],
    }),
    paddingBlockEnd: property({
        css: "padding-block-end",
        values: [],
        type: "string",
        docs: [
            "The padding-block-end CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end",
        ],
    }),
    paddingBlockStart: property({
        css: "padding-block-start",
        values: [],
        type: "string",
        docs: [
            "The padding-block-start CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start",
        ],
    }),
    paddingBottom: property({
        css: "padding-bottom",
        values: [],
        type: "string",
        docs: [
            "The padding-bottom CSS property sets the height of the padding area on the bottom of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom",
        ],
    }),
    paddingInline: property({
        css: "padding-inline",
        values: [],
        type: "string",
        docs: [
            "The padding-inline CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline",
        ],
    }),
    paddingInlineEnd: property({
        css: "padding-inline-end",
        values: [],
        type: "string",
        docs: [
            "The padding-inline-end CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end",
        ],
    }),
    paddingInlineStart: property({
        css: "padding-inline-start",
        values: [],
        type: "string",
        docs: [
            "The padding-inline-start CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start",
        ],
    }),
    paddingLeft: property({
        css: "padding-left",
        values: [],
        type: "string",
        docs: [
            "The padding-left CSS property sets the width of the padding area to the left of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left",
        ],
    }),
    paddingRight: property({
        css: "padding-right",
        values: [],
        type: "string",
        docs: [
            "The padding-right CSS property sets the width of the padding area on the right of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right",
        ],
    }),
    paddingTop: property({
        css: "padding-top",
        values: [],
        type: "string",
        docs: [
            "The padding-top CSS property sets the height of the padding area on the top of an element.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top"],
    }),
    pageBreakAfter: property({
        css: "page-break-after",
        values: [],
        type: "string",
        docs: [
            "The page-break-after CSS property adjusts page breaks after the current element.",
            "",
            "`Warning: This property has been replaced by the break-after property.`",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-after",
        ],
    }),
    pageBreakBefore: property({
        css: "page-break-before",
        values: [],
        type: "string",
        docs: [
            "The page-break-before CSS property adjusts page breaks before the current element.",
            "",
            "`Warning: This property has been replaced by the break-before property.`",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-before",
        ],
    }),
    pageBreakInside: property({
        css: "page-break-inside",
        values: [],
        type: "string",
        docs: [
            "The page-break-inside CSS property adjusts page breaks inside the current element.",
            "",
            "`Warning: This property has been replaced by the break-inside property.`",
        ],

        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-inside",
        ],
    }),
    perspective: property({
        css: "perspective",
        values: ["none"],
        type: "string",
        docs: [
            "The perspective CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/perspective"],
    }),
    perspectiveOrigin: property({
        css: "perspective-origin",
        values: ["top", "center", "right"],
        type: "string",
        docs: [
            "The perspective-origin CSS property determines the position at which the viewer is looking. It is used as the vanishing point by the perspective property.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/perspective-origin",
        ],
    }),
    placeContent: property({
        css: "place-content",
        values: [
            "start",
            "end",
            "flex-start",
            "flex-end",
            "center",
            "center",
            "left",
            "right",
            "space-between",
            "baseline",
            "first baseline",
            "last baseline",
            "space-evenly",
            "stretch",
            "safe",
            "unsafe",
        ],
        type: "string",
        docs: [
            "The place-content CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the align-content and justify-content properties) in a relevant layout system such as Grid or Flexbox.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/place-content",
        ],
    }),
    placeItems: property({
        css: "place-items",
        values: [
            "start",
            "end",
            "flex-start",
            "flex-end",
            "center",
            "center",
            "left",
            "right",
            "space-between",
            "baseline",
            "first baseline",
            "last baseline",
            "space-evenly",
            "stretch",
            "safe",
            "unsafe",
            "normal",
            "legacy",
            "self-start",
            "self-end",
        ],
        type: "string",
        docs: [
            "The CSS place-items shorthand property allows you to align items along both the block and inline directions at once (i.e. the align-items and justify-items properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/place-items"],
    }),
    pointerEvents: property({
        css: "pointer-events",
        values: [
            "auto",
            "none",
            "visiblePainted",
            "visibleFill",
            "visibleStroke",
            "visible",
            "painted",
            "fill",
            "stroke",
            "all",
        ],
        type: "string",
        docs: [
            "The pointer-events CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events",
        ],
    }),
    position: property({
        css: "position",
        values: ["static", "relative", "absolute", "fixed", "sticky"],
        type: "string",
        docs: [
            "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/position"],
    }),
    quotes: property({
        css: "quotes",
        values: ["none", "auto"],
        type: "string",
        docs: [
            "The quotes CSS property sets how the browser should render quotation marks that are added using the open-quotes or close-quotes values of the CSS content property.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/quotes"],
    }),
    resize: property({
        css: "resize",
        values: [],
        methods: ["none", "both", "horizontal", "vertical", "block", "inline"],
        type: "string",
        docs: [
            "The resize CSS property sets whether an element is resizable, and if so, in which directions.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/resize"],
    }),
    rotate: property({
        css: "rotate",
        values: ["none"],
        type: "string",
        docs: [
            "The rotate CSS property allows you to specify rotation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform property.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/rotate"],
    }),
    rowGap: property({
        css: "row-gap",
        values: [],
        type: "string",
        docs: [
            "The row-gap CSS property sets the size of the gap (gutter) between an element's rows.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap"],
    }),
    rubyAlign: property({
        css: "ruby-align",
        values: ["start", "center", "space-between", "space-around"],
        type: "string",
        docs: [
            "The ruby-align CSS property defines the distribution of the different ruby elements over the base.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-align"],
        docs: [],
        links: [],
    }),
    rubyPosition: property({
        css: "ruby-position",
        values: ["over", "under", "inter-character", "alternate"],
        type: "string",
        docs: [
            "The ruby-position CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (over), under it (under), or between the characters on their right side (inter-character).",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position",
        ],
    }),
    scale: property({
        css: "scale",
        values: [],
        methods: ["none"],
        type: "string",
        docs: [
            "The scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/scale"],
    }),
    scrollBehavior: property({
        css: "scroll-behavior",
        values: ["auto", "smooth"],
        type: "string",
        docs: [
            "The scroll-behavior CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior",
        ],
    }),
    scrollMargin: property({
        css: "scroll-margin",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin shorthand property sets all of the scroll margins of an element at once, assigning values much like the margin property does for margins of an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin",
        ],
    }),
    scrollMarginBlock: property({
        css: "scroll-margin-block",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-block shorthand property sets the scroll margins of an element in the block dimension.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block",
        ],
    }),
    scrollMarginBlockEnd: property({
        css: "scroll-margin-block-end",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block-end",
        ],
    }),
    scrollMarginBlockStart: property({
        css: "scroll-margin-block-start",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block-start",
        ],
    }),
    scrollMarginBottom: property({
        css: "scroll-margin-bottom",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-bottom",
        ],
    }),
    scrollMarginInline: property({
        css: "scroll-margin-inline",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-inline shorthand property sets the scroll margins of an element in the inline dimension.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline",
        ],
    }),
    scrollMarginInlineEnd: property({
        css: "scroll-margin-inline-end",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline-end",
        ],
    }),
    scrollMarginInlineStart: property({
        css: "scroll-margin-inline-start",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline-start",
        ],
    }),
    scrollMarginLeft: property({
        css: "scroll-margin-left",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-left",
        ],
    }),
    scrollMarginRight: property({
        css: "scroll-margin-right",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-right",
        ],
    }),
    scrollMarginTop: property({
        css: "scroll-margin-top",
        values: [],
        type: "string",
        docs: [
            "The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-top",
        ],
    }),
    scrollPadding: property({
        css: "scroll-padding",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding shorthand property sets scroll padding on all sides of an element at once, much like the padding property does for padding on an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding",
        ],
    }),
    scrollPaddingBlock: property({
        css: "scroll-padding-block",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-block shorthand property sets the scroll padding of an element in the block dimension.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block",
        ],
    }),
    scrollPaddingBlockEnd: property({
        css: "scroll-padding-block-end",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block-end",
        ],
    }),
    scrollPaddingBlockStart: property({
        css: "scroll-padding-block-start",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block-start",
        ],
    }),
    scrollPaddingBottom: property({
        css: "scroll-padding-bottom",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-bottom",
        ],
    }),
    scrollPaddingInline: property({
        css: "scroll-padding-inline-end",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline-end",
        ],
    }),
    scrollPaddingInlineStart: property({
        css: "scroll-padding-inline-start",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline-start",
        ],
    }),
    scrollPaddingLeft: property({
        css: "scroll-padding-left",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-left",
        ],
    }),
    scrollPaddingRight: property({
        css: "scroll-padding-right",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-right",
        ],
    }),
    scrollPaddingTop: property({
        css: "scroll-padding-top",
        values: [],
        type: "string",
        docs: [
            "The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-top",
        ],
    }),
    scrollSnapAlign: property({
        css: "scroll-snap-align",
        values: ["none", "start", "end", "center"],
        type: "string",
        docs: [
            "The scroll-snap-align property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-align",
        ],
    }),
    scrollSnapStop: property({
        css: "scroll-snap-stop",
        values: ["normal", "always"],
        type: "string",
        docs: [
            'The scroll-snap-stop CSS property defines whether or not the scroll container is allowed to "pass over" possible snap positions.',
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-stop",
        ],
    }),
    scrollSnapType: property({
        css: "scroll-snap-type",
        values: [
            "none",
            "x",
            "y",
            "block",
            "inline",
            "both",
            "mandatory",
            "proximity",
        ],
        type: "string",
        docs: [
            "The scroll-snap-type CSS property sets how strictly snap points are enforced on the scroll container in case there is one.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type",
        ],
    }),
    scrollbarColor: property({
        css: "scrollbar-color",
        values: [],
        type: COLOR,
        docs: [
            "The scrollbar-color CSS property sets the color of the scrollbar track and thumb.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color",
        ],
    }),
    scrollbarGutter: property({
        css: "scrollbar-gutter",
        values: ["auto", "stable", "both-edges"],
        type: "string",
        docs: [
            "The scrollbar-gutter CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter",
        ],
    }),
    scrollbarWidth: property({
        css: "scrollbar-width",
        values: ["auto", "thin", "none"],
        type: "string",
        docs: [
            "The scrollbar-width property allows the author to set the maximum thickness of an element's scrollbars when they are shown.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width",
        ],
    }),
    shapeImageThreshold: property({
        css: "shape-image-threshold",
        values: [],
        type: "string",
        docs: [
            "The shape-image-threshold CSS property sets the alpha channel threshold used to extract the shape using an image as the value for shape-outside.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/shape-image-threshold",
        ],
    }),
    shapeMargin: property({
        css: "shape-margin",
        values: [],
        type: "string",
        docs: [
            "The shape-margin CSS property sets a margin for a CSS shape created using shape-outside.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/shape-margin",
        ],
    }),
    shapeOutside: property({
        css: "shape-outside",
        values: [
            "none",
            "margin-box",
            "content-box",
            "border-box",
            "padding-box",
        ],
        type: "string",
        docs: [
            "The shape-outside CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; shape-outside provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside",
        ],
    }),
    tabSize: property({
        css: "tab-size",
        values: [],
        type: "string",
        support: ["-moz-tab-size", "-o-tab-size"],
        docs: [
            "The tab-size CSS property is used to customize the width of tab characters (U+0009).",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size"],
    }),
    tableLayout: property({
        css: "table-layout",
        values: ["auto", "fixed"],
        type: "string",
        docs: [
            "The table-layout CSS property sets the algorithm used to lay out <table> cells, rows, and columns.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout",
        ],
    }),
    textAlign: property({
        css: "text-align",
        values: [
            "start",
            "end",
            "left",
            "right",
            "center",
            "justify",
            "justify-all",
            "match-parent",
        ],
        type: "string",
        docs: [
            "The text-align CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like vertical-align but in the horizontal direction.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/text-align"],
    }),
    textAlignLast: property({
        css: "text-align-last",
        values: ["start", "end", "left", "right", "center", "justify"],
        type: "string",
        docs: [
            "The text-align-last CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-align-last",
        ],
    }),
    textCombineUpright: property({
        css: "text-combine-upright",
        values: ["none", "all"],
        type: "string",
        docs: [
            "The text-combine-upright CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-combine-upright",
        ],
    }),
    textDecoration: property({
        css: "text-decoration",
        values: ["none"],
        type: "string",
        docs: [
            "The text-decoration shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for text-decoration-line, text-decoration-color, text-decoration-style, and the newer text-decoration-thickness property.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration",
        ],
    }),
    textDecorationColor: property({
        css: "text-decoration-color",
        values: [],
        type: COLOR,
        docs: [
            "The text-decoration-color CSS property sets the color of decorations added to text by text-decoration-line.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color",
        ],
    }),
    textDecorationLine: property({
        css: "text-decoration-line",
        values: ["none", "underline", "overline", "line-through", "blink"],
        type: "string",
        docs: [
            "The text-decoration-line CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line",
        ],
    }),
    textDecorationSkip: property({
        css: "text-decoration-skip",
        values: [
            "none",
            "objects",
            "spaces",
            "edges",
            "box-decoration",
            "leading-spaces",
            "trailing-spaces",
        ],
        type: "string",
        docs: [
            "The text-decoration-skip CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.",
        ],
        decorators: ["experimental"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip",
        ],
    }),
    textDecorationSkipInk: property({
        css: "text-decoration-skip-ink",
        values: ["none", "auto", "all"],
        type: "string",
        docs: [
            "The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip-ink",
        ],
    }),
    textDecorationStyle: property({
        css: "text-decoration-style",
        values: ["solid", "double", "dotted", "dashed", "wavy"],
        type: "string",
        docs: [
            "The text-decoration-style CSS property sets the style of the lines specified by text-decoration-line. The style applies to all lines that are set with text-decoration-line.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style",
        ],
    }),
    textDecorationThickness: property({
        css: "text-decoration-thickness",
        values: ["auto", "from-font"],
        type: "string",
        docs: [
            "The text-decoration-thickness CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness",
        ],
    }),
    textEmphasis: property({
        css: "text-emphasis",
        values: ["none"],
        type: "string",
        support: ["-webkit-text-emphasis"],
        docs: [
            "The text-emphasis CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for text-emphasis-style and text-emphasis-color.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis",
        ],
    }),
    textEmphasisColor: property({
        css: "text-emphasis-color",
        values: [],
        type: COLOR,
        docs: [
            "The text-emphasis-color CSS property sets the color of emphasis marks. This value can also be set using the text-emphasis shorthand.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-color",
        ],
    }),
    textEmphasisPosition: property({
        css: "text-emphasis-position",
        values: ["over", "under", "right", "left"],
        type: "string",
        docs: [],
        links: [],
    }),
    textEmphasisStyle: property({
        css: "text-emphasis-style",
        values: [
            "none",
            "filled",
            "open",
            "dot",
            "circle",
            "double-circle",
            "triangle",
            "sesame",
        ],
        type: "string",
        docs: [
            "The text-emphasis-position CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-position",
        ],
    }),
    textIndent: property({
        css: "text-indent",
        values: [],
        type: "string",
        docs: [
            "The text-indent CSS property sets the length of empty space (indentation) that is put before lines of text in a block.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent"],
    }),
    textJustify: property({
        css: "text-justify",
        values: ["none", "auto", "inter-word", "inter-character", "distribute"],
        type: "string",
        docs: [
            "The text-justify CSS property sets what type of justification should be applied to text when text-align: justify; is set on an element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-justify",
        ],
    }),
    textOrientation: property({
        css: "text-orientation",
        values: [
            "mixed",
            "upright",
            "sideways-right",
            "sideways",
            "use-glyph-orientation",
        ],
        type: "string",
        docs: [
            "The text-orientation CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when writing-mode is not horizontal-tb). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation",
        ],
    }),
    textOverflow: property({
        css: "text-overflow",
        values: ["clip", "ellipsis"],
        type: "string",
        docs: [
            "The text-overflow CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('…'), or display a custom string.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow",
        ],
    }),
    textRendering: property({
        css: "text-rendering",
        values: [
            "auto",
            "optimizeSpeed",
            "optimizeLegibility",
            "geometricPrecision",
        ],
        type: "string",
        docs: [
            "The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering",
        ],
    }),
    textShadow: property({
        css: "text-shadow",
        values: [],
        type: "string",
        docs: [
            "The text-shadow CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its decorations. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow"],
    }),
    textSizeAdjust: property({
        css: "text-size-adjust",
        values: [],
        type: "string",
        docs: [
            "The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.",
        ],
        decorators: ["experimental"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust",
        ],
    }),
    textTransform: property({
        css: "text-transform",
        values: [
            "none",
            "capitalize",
            "uppercase",
            "lowercase",
            "full-width",
            "full-size-kana",
        ],
        type: "string",
        docs: [
            "The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform",
        ],
    }),
    textUnderlineOffset: property({
        css: "text-underline-offset",
        values: ["auto"],
        type: "string",
        docs: [
            "The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-underline-offset",
        ],
    }),
    textUnderlinePosition: property({
        css: "text-underline-position",
        values: ["auto", "under", "left", "right"],
        type: "string",
        docs: [
            "The text-underline-position CSS property specifies the position of the underline which is set using the text-decoration property's underline value.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/text-underline-position",
        ],
    }),
    top: property({
        css: "top",
        values: ["auto"],
        type: "string",
        docs: [
            "The top CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/top"],
    }),
    touchAction: property({
        css: "touch-action",
        values: [
            "auto",
            "none",
            "pan-x",
            "pan-y",
            "manipulation",
            "pinch-zoom",
        ],
        type: "string",
        docs: [
            "The touch-action CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action",
        ],
    }),
    transform: property({
        css: "transform",
        values: [],
        type: "string",
        docs: [
            "The transform CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/transform"],
        support: ["-webkit-transform"],
    }),
    transformBox: property({
        css: "transform-box",
        values: [
            "content-box",
            "border-box",
            "fill-box",
            "stroke-box",
            "view-box",
        ],
        type: "string",
        docs: [
            "The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box",
        ],
    }),
    transformOrigin: property({
        css: "transform-origin",
        values: ["left", "center", "right", "top", "bottom"],
        type: "string",
        docs: [
            "The transform-origin CSS property sets the origin for an element's transformations.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin",
        ],
    }),
    transformStyle: property({
        css: "transform-style",
        values: ["flat", "preserve-3d"],
        type: "string",
        docs: [
            "The transform-style CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style",
        ],
    }),
    transition: property({
        css: "transition",
        values: [],
        type: "string",
        docs: [
            "The transition CSS property is a shorthand property for transition-property, transition-duration, transition-timing-function, and transition-delay.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/transition"],
    }),
    transitionDelay: property({
        css: "transition-delay",
        values: [],
        type: "string",
        docs: [
            "The transition-delay CSS property specifies the duration to wait before starting a property's transition effect when its value changes.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay",
        ],
    }),
    transitionDuration: property({
        css: "transition-duration",
        values: [],
        type: "string",
        docs: [
            "The transition-duration CSS property sets the length of time a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration",
        ],
    }),
    transitionProperty: property({
        css: "transition-property",
        values: [],
        type: "string",
        docs: [
            "The transition-property CSS property sets the CSS properties to which a transition effect should be applied.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property",
        ],
    }),
    transitionTimingFunction: property({
        css: "transition-timing-function",
        values: [
            "ease",
            "ease-in",
            "ease-out",
            "ease-in-out",
            "linear",
            "step-start",
            "step-end",
        ],
        type: "string",
        docs: [
            "The transition-timing-function CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function",
        ],
    }),
    translate: property({
        css: "translate",
        values: ["none"],
        type: "string",
        docs: [
            "The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/translate"],
    }),
    unicodeBidi: property({
        css: "unicode-bidi",
        values: [],
        type: "string",
        docs: [
            "The unicode-bidi CSS property, together with the direction property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The unicode-bidi property overrides this algorithm and allows the developer to control the text embedding.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/unicode-bidi",
        ],
    }),
    userSelect: property({
        css: "user-select",
        values: ["none", "auto", "text", "contain", "all"],
        type: "string",
        docs: [
            "The user-select CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/user-select"],
    }),
    verticalAlign: property({
        css: "vertical-align",
        values: [
            "baseline",
            "sub",
            "super",
            "text-top",
            "text-bottom",
            "middle",
            "top",
            "bottom",
        ],
        type: "string",
        docs: [
            "The vertical-align CSS property sets vertical alignment of an inline, inline-block or table-cell box.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align",
        ],
    }),
    visibility: property({
        css: "visibility",
        values: ["visible", "hidden", "collapse"],
        type: "string",
        docs: [
            "The visibility CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a ``<table>``.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/visibility"],
    }),
    whiteSpace: property({
        css: "white-space",
        values: [
            "normal",
            "nowrap",
            "pre",
            "pre-wrap",
            "pre-line",
            "break-spaces",
        ],
        type: "string",
        docs: [
            "The white-space CSS property sets how white space inside an element is handled.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/white-space"],
    }),
    width: property({
        css: "width",
        values: ["max-content", "min-content", "auto"],
        type: "string",
        docs: [
            "The width CSS property sets an element's width. By default, it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/width"],
    }),
    widows: property({
        css: "widows",
        values: [],
        type: "string",
        docs: [
            "The widows CSS property sets the minimum number of lines in a block container that must be shown at the top of a page, region, or column.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/widows"],
    }),
    wordBreak: property({
        css: "word-break",
        values: ["normal", "break-all", "keep-all", "break-word"],
        type: "string",
        docs: [
            "The word-break CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/word-break"],
    }),
    wordSpacing: property({
        css: "word-spacing",
        values: ["normal"],
        type: "string",
        docs: [
            "The word-spacing CSS property sets the length of space between words and between tags.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing",
        ],
    }),
    wordWrap: property({
        css: "word-wrap",
        values: ["normal", "break-word", "anywhere"],
        type: "string",
        docs: [
            "The overflow-wrap CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap",
        ],
    }),
    writingMode: property({
        css: "writing-mode",
        values: ["horizontal-tb", "vertical-rl", "vertical-lr"],
        type: "string",
        docs: [
            "The writing-mode CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (html element for HTML documents).",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode",
        ],
    }),
    zIndex: property({
        css: "z-index",
        values: ["auto"],
        type: "string",
        docs: [
            "The z-index CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.",
        ],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/z-index"],
    }),
    zoom: property({
        css: "zoom",
        values: [],
        type: "string",
        docs: [
            "The non-standard zoom CSS property can be used to control the magnification level of an element. transform: scale() should be used instead of this property, if possible. However, unlike CSS Transforms, zoom affects the layout size of the element.",
        ],
        decorators: ["non-standard"],
        links: ["https://developer.mozilla.org/en-US/docs/Web/CSS/zoom"],
    }),
    webkitLineClamp: property({
        css: "-webkit-line-clamp",
        values: [],
        type: "string",
        docs: [
            "The -webkit-line-clamp CSS property allows limiting of the contents of a block container to the specified number of lines.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp",
        ],
    }),

    // SVG
    alignmentBaseline: property({
        css: "alignment-baseline",
        values: [],
        type: "string",
        docs: [
            "The alignment-baseline attribute specifies how an object is aligned with respect to its parent. This property specifies which baseline of this element is to be aligned with the corresponding baseline of the parent. For example, this allows alphabetic baselines in Roman text to stay aligned across font size changes. It defaults to the baseline with the same name as the computed value of the alignment-baseline property.",
            "",
            "You can use this attribute with the following SVG elements:",
            "* `<tspan>`",
            "* `<tref>`",
            "* `<altGlyph>`",
            "* `<textPath>`",
        ],
    }),
    baselineShift: property({
        css: "baseline-shift",
        values: [],
        type: "string",
        docs: [
            "The baseline-shift attribute allows repositioning of the dominant-baseline relative to the dominant-baseline of the parent text content element. The shifted object might be a sub- or superscript.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/baseline-shift",
        ],
    }),
    clipRule: property({
        css: "clip-rule",
        values: [],
        type: "string",
        docs: [
            "The clip-rule attribute only applies to graphics elements that are contained within a <clipPath> element. The clip-rule attribute basically works as the fill-rule attribute, except that it applies to <clipPath> definitions.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/clip-rule",
        ],
    }),
    colorInterpolation: property({
        css: "color-interpolation",
        values: [],
        type: "string",
        docs: [
            "The color-interpolation attribute specifies the color space for gradient interpolations, color animations, and alpha compositing.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/color-interpolation",
        ],
    }),
    colorInterpolationFilter: property({
        css: "color-interpolation-filters",
        values: [],
        type: "string",
        docs: [
            "The color-interpolation-filters attribute specifies the color space for imaging operations performed via filter effects.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/color-interpolation-filters",
        ],
    }),
    colorProfile: property({
        css: "color-profile",
        values: [],
        type: "string",
        docs: [
            "The color-profile attribute is used to define which color profile a raster image included through the ``<image>`` element should use.",
            "",
        ],
        decorators: ["deprecated"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/color-profile",
        ],
    }),
    colorRendering: property({
        css: "color-rendering",
        values: [],
        type: "string",
        docs: [],
        links: [],
    }),
    dominantBaseline: property({
        css: "dominant-baseline",
        values: [],
        type: "string",
        docs: [
            "The dominant-baseline attribute specifies the dominant baseline, which is the baseline used to align the box's text and inline-level contents. It also indicates the default alignment baseline of any boxes participating in baseline alignment in the box's alignment context.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/dominant-baseline",
        ],
    }),
    enableBackground: property({
        css: "enable-background",
        values: [],
        type: "string",
        docs: [],
        links: [],
    }),
    fill: property({
        css: "fill",
        values: [],
        type: "string",
        docs: [
            "The fill attribute has two different meanings. For shapes and text it's a presentation attribute that defines the color (or any SVG paint servers like gradients or patterns) used to paint the element; for animation it defines the final state of the animation.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill",
        ],
    }),
    fillOpacity: property({
        css: "fill-opacity",
        values: [],
        type: "string",
        docs: [
            "The enable-background attribute specifies how the accumulation of the background image is managed.",
        ],
        decorators: ["deprecated"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/enable-background",
        ],
    }),
    fillRule: property({
        css: "fill-rule",
        values: [],
        type: "string",
        docs: [
            "The fill-rule attribute is a presentation attribute defining the algorithm to use to determine the inside part of a shape.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule",
        ],
    }),
    filter: property({
        css: "filter",
        values: [],
        type: "string",
        docs: [
            "The filter attribute specifies the filter effects defined by the <filter> element that shall be applied to its element.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/filter",
        ],
    }),
    floodColor: property({
        css: "flood-color",
        values: [],
        type: "string",
        docs: [
            "The flood-color attribute indicates what color to use to flood the current filter primitive subregion.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/flood-color",
        ],
    }),
    floodOpacity: property({
        css: "flood-opacity",
        values: [],
        type: "string",
        docs: [
            "The flood-opacity attribute indicates the opacity value to use across the current filter primitive subregion.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/flood-opacity",
        ],
    }),
    glyphOrientationHorizontal: property({
        css: "glyph-orientation-horizontal",
        values: [],
        type: "string",
        docs: [
            "The glyph-orientation-horizontal attribute affects the amount that the current text position advances as each glyph is rendered.",
        ],
        decorators: ["deprecated"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/glyph-orientation-horizontal",
        ],
    }),
    glyphOrientationVertical: property({
        css: "glyph-orientation-vertical",
        values: [],
        type: "string",
        docs: [
            "The glyph-orientation-vertical attribute affects the amount that hte current text position advances as each glyph is rendered.",
        ],
        decorators: ["deprecated"],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/glyph-orientation-vertical",
        ],
    }),
    lightingColor: property({
        css: "lighting-color",
        values: [],
        type: "string",
        docs: [
            "The lighting-color attribute defines the color of the light source for lighting filter primitives.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/lighting-color",
        ],
    }),
    markerEnd: property({
        css: "marker-end",
        values: [],
        type: "string",
        docs: [
            "The marker-end attribute defines the arrowhead or polymarker that will be drawn at the final vertex of the given shape.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/marker-end",
        ],
    }),
    markerMid: property({
        css: "marker-mid",
        values: [],
        type: "string",
        docs: [
            "The marker-mid attribute defines the arrowhead or polymarker that will be drawn at all interior vertices of the given shape.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/marker-mid",
        ],
    }),
    markerStart: property({
        css: "marker-start",
        values: [],
        type: "string",
        docs: [
            "The marker-start attribute defines the arrowhead or polymarker that will be drawn at the first vertex of the given shape.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/marker-start",
        ],
    }),
    shapeRendering: property({
        css: "shape-rendering",
        values: [],
        type: "string",
        docs: [
            "The shape-rendering attribute provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering",
        ],
    }),
    stopColor: property({
        css: "stop-color",
        values: [],
        type: "string",
        docs: [
            "The stop-color attribute indicates what color to use at a gradient stop.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stop-color",
        ],
    }),
    stopOpacity: property({
        css: "stop-opacity",
        values: [],
        type: "string",
        docs: [
            "The stop-opacity attribute defines the opacity of a given color gradient stop.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stop-opacity",
        ],
    }),
    stroke: property({
        css: "stroke",
        values: [],
        type: "string",
        docs: [
            "The stroke attribute is a presentation attribute defining the color (or any SVG paint servers like gradients or patterns) used to paint the outline of the shape;",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke",
        ],
    }),
    strokeDasharray: property({
        css: "stroke-dasharray",
        values: [],
        type: "string",
        docs: [
            "The stroke-dasharray attribute is a presentation attribute defining the pattern of dashes and gaps used to paint the outline of the shape;",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        ],
    }),
    strokeDashoffset: property({
        css: "stroke-dashoffset",
        values: [],
        type: "string",
        docs: [
            "The stroke-dashoffset attribute is a presentation attribute defining an offset on the rendering of the associated dash array.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset",
        ],
    }),
    strokeLinecap: property({
        css: "stroke-linecap",
        values: [],
        type: "string",
        docs: [
            "The stroke-linecap attribute is a presentation attribute defining the shape to be used at the end of open subpaths when they are stroked.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap",
        ],
    }),
    strokeLinejoin: property({
        css: "stroke-linejoin",
        values: [],
        type: "string",
        docs: [
            "The stroke-linejoin attribute is a presentation attribute defining the shape to be used at the corners of paths when they are stroked.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin",
        ],
    }),
    strokeMiterlimit: property({
        css: "stroke-miterlimit",
        values: [],
        type: "string",
        docs: [
            "The stroke-miterlimit attribute is a presentation attribute defining a limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit",
        ],
    }),
    strokeOpacity: property({
        css: "stroke-opacity",
        values: [],
        type: "string",
        docs: [
            "The stroke-opacity attribute is a presentation attribute defining the opacity of the paint server (color, gradient, pattern, etc.) applied to the stroke of a shape.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-opacity",
        ],
    }),
    strokeWidth: property({
        css: "stroke-width",
        values: [],
        type: "string",
        docs: [
            "The stroke-width attribute is a presentation attribute defining the width of the stroke to be applied to the shape.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-width",
        ],
    }),
    textAnchor: property({
        css: "text-anchor",
        values: [],
        type: "string",
        docs: [
            "The text-anchor attribute is used to align (start-, middle- or end-alignment) a string of pre-formatted text or auto-wrapped text where the wrapping area is determined from the inline-size property relative to a given point.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor",
        ],
    }),
    vectorEffect: property({
        css: "vector-effect",
        values: [],
        type: "string",
        docs: [
            "The vector-effect property specifies the vector effect to use when drawing an object. Vector effects are applied before any of the other compositing operations, i.e. filters, masks and clips.",
        ],
        links: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/vector-effect",
        ],
    }),
};

module.exports = { ListOfCssProperties, globalValues };
