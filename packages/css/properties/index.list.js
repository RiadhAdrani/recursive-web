const { property } = require("../../templates");

const COLOR = "Color";

const globalValues = [
    "inherit",
    "initial",
    "revert",
    "unset",
    "revert",
    "revert-layer",
];

const ListOfCssProperties = {
    accentColor: property({
        css: "accent-color",
        values: ["auto"],
        type: COLOR,
        support: [],
    }),
    alignContent: property({
        css: "align-content",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "normal",
            "baseline",
            "first baseline",
            "last baseline",
            "space-between",
            "space-around",
            "space-evenly",
            "stretch",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        support: [],
    }),
    alignItems: property({
        css: "align-items",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "normal",
            "baseline",
            "first baseline",
            "last baseline",
            "stretch",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        support: [],
    }),
    alignSelf: property({
        css: "align-self",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "normal",
            "baseline",
            "first baseline",
            "last baseline",
            "space-between",
            "space-around",
            "space-evenly",
            "self-start",
            "self-end",
            "stretch",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        support: [],
    }),
    alignTracks: property({
        css: "align-tracks",
        values: ["start", "space-between", "center"],
        type: "string",
        support: [],
    }),
    all: property({
        css: "all",
        values: [],
        type: "string",
        support: [],
    }),
    animation: property({
        css: "animation",
        values: [],
        type: "string",
        support: [],
    }),
    animationDelay: property({
        css: "animation-delay",
        values: [],
        type: "string",
        support: [],
    }),
    animationDuration: property({
        css: "animation-duration",
        values: [],
        type: "string",
        support: [],
    }),
    animationFillMode: property({
        css: "animation-fill-mode",
        values: ["none", "forwards", "backwards", "both"],

        type: "string",
        support: [],
    }),
    animationIterationCount: property({
        css: "animation-iteration-count",
        values: ["infinite"],
        type: "number",
        support: [],
    }),
    animationName: property({
        css: "animation-name",
        values: [],
        type: "string",
        support: [],
    }),
    animationPlayState: property({
        css: "animation-play-state",
        values: ["running", "paused"],
        type: "string",
        support: [],
    }),
    animationTimingFunction: property({
        css: "animation-timing-function",
        values: [
            "ease",
            "ease-in",
            "ease-out",
            "ease-in-out",
            "linear",
            "step-start",
            "step-end",
        ],
        type: "string",
        support: [],
    }),
    appearance: property({
        css: "appearance",
        values: [
            "none",
            "auto",
            "menulist-button",
            "textfield",
            "button",
            "searchfield",
            "textarea",
            "push-button",
            "slide-horizontal",
            "checkbox",
            "radio",
            "square-button",
            "menulist",
            "meter",
            "progress-bar",
        ],
        type: "string",
        support: [],
    }),
    ascentOverride: property({
        css: "ascent-override",
        values: [],
        type: "string",
        support: [],
    }),
    aspectRatio: property({
        css: "aspect-ratio",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    backdropFilter: property({
        css: "backdrop-filter",
        values: ["none"],
        type: "string",
        support: [],
    }),
    backfaceVisibility: property({
        css: "backface-visibility",
        values: ["hidden", "visible"],
        type: "string",
        support: [],
    }),
    background: property({
        css: "background",
        values: [],
        type: "string",
        support: [],
    }),
    backgroundAttachment: property({
        css: "background-attachment",
        values: ["scroll", "fixed", "local"],
        type: "string",
        support: [],
    }),
    backgroundBlendMode: property({
        css: "background-blend-mode",
        values: [],
        type: "string",
        support: [],
    }),
    backgroundClip: property({
        css: "background-clip",
        values: ["border-box", "padding-box", "content-box", "text"],
        type: "string",
        support: [],
    }),
    backgroundColor: property({
        css: "background-color",
        values: [],

        type: COLOR,
        support: [],
    }),
    backgroundImage: property({
        css: "background-image",
        values: [],
        type: "string",
        support: [],
    }),
    backgroundOrigin: property({
        css: "background-origin",
        values: ["border-box", "padding-box", "content-box"],
        type: "string",
        support: [],
    }),
    backgroundPosition: property({
        css: "background-position",
        values: ["top", "bottom", "left", "right", "center"],
        type: "string",
        support: [],
    }),
    backgroundPositionX: property({
        css: "background-position-x",
        values: ["left", "right", "center"],
        type: "string",
        support: [],
    }),
    backgroundPositionY: property({
        css: "background-position-y",
        values: ["top", "center", "bottom"],
        type: "string",
        support: [],
    }),
    backgroundRepeat: property({
        css: "background-repeat",
        values: [
            "repeat-x",
            "repeat-y",
            "repeat",
            "space",
            "round",
            "no-repeat",
        ],
        type: "string",
        support: [],
    }),
    backgroundSize: property({
        css: "background-size",
        values: ["cover", "contain"],
        type: "string",
        support: [],
    }),
    blockSize: property({
        css: "block-size",
        values: ["max-content", "min-content"],
        type: "string",
        support: [],
    }),
    borderBlock: property({
        css: "border-block",
        values: [],
        type: "string",
        support: [],
    }),
    borderBlockColor: property({
        css: "border-block-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderBlockStyle: property({
        css: "border-block-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        support: [],
    }),
    borderBlockWidth: property({
        css: "border-block-width",
        values: ["thick"],
        type: "string",
        support: [],
    }),
    borderBlockEnd: property({
        css: "border-block-end",
        values: [],
        type: "string",
        support: [],
    }),
    borderBlockEndColor: property({
        css: "border-block-end-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderBlockEndStyle: property({
        css: "border-block-end-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        support: [],
    }),
    borderBlockEndWidth: property({
        css: "border-block-end-width",
        values: ["thick"],
        type: "string",
        support: [],
    }),
    borderBlockStart: property({
        css: "border-block-start",
        values: [],
        type: "string",
        support: [],
    }),
    borderBlockStartColor: property({
        css: "border-block-start-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderBlockStartStyle: property({
        css: "border-block-start-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        support: [],
    }),
    borderBlockStartWidth: property({
        css: "border-block-start-width",
        values: ["thick"],
        type: "string",
        support: [],
    }),
    border: property({
        css: "border",
        values: [],
        type: "string",
        support: [],
    }),
    borderBottom: property({
        css: "border-bottom",
        value: [],
        type: "string",
        support: [],
    }),
    borderBottomColor: property({
        css: "border-bottom-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderBottomLeftRadius: property({
        css: "border-bottom-left-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderBottomRightRadius: property({
        css: "border-bottom-right-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderBottomStyle: property({
        css: "border-bottom-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        support: [],
    }),
    borderBottomWidth: property({
        css: "border-bottom-width",
        values: ["thin", "medium", "thick"],
        type: "string",
        support: [],
    }),
    borderCollapse: property({
        css: "border-collapse",
        values: ["collapse", "seperate"],
        type: "string",
        support: [],
    }),
    borderColor: property({
        css: "border-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderEndEndRadius: property({
        css: "border-end-end-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderEndStartRadius: property({
        css: "border-end-start-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderStartEndRadius: property({
        css: "border-start-end-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderStartStartRadius: property({
        css: "border-start-start-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderImage: property({
        css: "border-image",
        values: [],
        type: "string",
        support: [],
    }),
    borderImageOutset: property({
        css: "border-outset",
        values: [],
        type: "string",
        support: [],
    }),
    borderImageRepeat: property({
        css: "border-image-repeat",
        values: ["stretch", "repeat", "round", "space"],
        type: "string",
        support: [],
    }),
    borderImageSlice: property({
        css: "border-image-slice",
        values: ["fill"],
        type: "string",
        support: [],
    }),
    borderImageSource: property({
        css: "border-image-source",
        values: [],
        type: "string",
        support: [],
    }),
    borderImageWidth: property({
        css: "border-image-width",
        values: [],
        type: "string",
        support: [],
    }),
    borderInline: property({
        css: "border-inline",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderInlineColor: property({
        css: "border-inline-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderInlineStyle: property({
        css: "border-inline-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        support: [],
    }),
    borderInlineWidth: property({
        css: "border-inline-width",
        values: [],
        type: "string",
        support: [],
    }),
    borderInlineEnd: property({
        css: "border-inline-end",
        values: [],
        type: "string",
        support: [],
    }),
    borderInlineEndColor: property({
        css: "border-inline-end-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderInlineEndStyle: property({
        css: "border-inline-end-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        support: [],
    }),
    borderInlineEndWidth: property({
        css: "border-inline-end-width",
        values: [],
        type: "string",
        support: [],
    }),
    borderStartEnd: property({
        css: "border-start-end",
        values: [],
        type: "string",
        support: [],
    }),
    borderInlineStartColor: property({
        css: "border-inline-start-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderInlineStartStyle: property({
        css: "border-inline-start-style",
        values: ["dashed", "dotted", "groove"],
        type: "string",
        support: [],
    }),
    borderInlineStartWidth: property({
        css: "border-inline-start-width",
        values: [],
        type: "string",
        support: [],
    }),
    borderLeft: property({
        css: "border-left",
        values: [],
        type: "string",
        support: [],
    }),
    borderLeftColor: property({
        css: "border-left-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderLeftStyle: property({
        css: "border-left-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        support: [],
    }),
    borderLeftWidth: property({
        css: "border-left-width",
        values: [],
        type: "string",
        support: [],
    }),
    borderRadius: property({
        css: "border-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderRight: property({
        css: "border-right",
        values: [],
        type: "string",
        support: [],
    }),
    borderRightColor: property({
        css: "border-right-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderRightStyle: property({
        css: "border-right-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        support: [],
    }),
    borderRightWidth: property({
        css: "border-right-width",
        values: [],
        type: "string",
        support: [],
    }),
    borderSpacing: property({
        css: "border-spacing",
        values: [],
        type: "string",
        support: [],
    }),
    borderStyle: property({
        css: "border-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        support: [],
    }),
    borderTop: property({
        css: "border-top",
        values: [],
        type: "string",
        support: [],
    }),
    borderTopColor: property({
        css: "border-top-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    borderTopLeftRadius: property({
        css: "border-top-left-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderTopRightRadius: property({
        css: "border-top-right-radius",
        values: [],
        type: "string",
        support: [],
    }),
    borderTopStyle: property({
        css: "border-top-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        support: [],
    }),
    borderTopWidth: property({
        css: "border-top-width",
        values: [],
        type: "string",
        support: [],
    }),
    borderWidth: property({
        css: "border-width",
        values: [],
        type: "string",
        support: [],
    }),
    bottom: property({
        css: "bottom",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    boxDecorationBreak: property({
        css: "box-decoration-break",
        values: ["slice", "clone"],
        type: "string",
        support: [],
    }),
    boxShadow: property({
        css: "box-shadow",
        values: ["none"],
        type: "string",
        support: [],
    }),
    boxSizing: property({
        css: "box-sizing",
        values: ["border-box", "box-sizing"],
        type: "string",
        support: [],
    }),
    breakAfter: property({
        css: "break-after",
        values: [
            "auto",
            "avoid",
            "always",
            "all",
            "avoid-page",
            "page",
            "left",
            "right",
            "recto",
            "verso",
            "avoid-column",
            "column",
            "avoid-region",
            "region",
        ],
        type: "string",
        support: [],
    }),
    breakBefore: property({
        css: "break-before",
        values: [
            "auto",
            "avoid",
            "always",
            "all",
            "avoid-page",
            "page",
            "left",
            "right",
            "recto",
            "verso",
            "avoid-column",
            "column",
            "avoid-region",
            "region",
        ],
        type: "string",
        support: [],
    }),
    breakInside: property({
        css: "break-inside",
        values: ["auto", "avoid", "avoid-page", "avoid-column", "avoid-region"],
        type: "string",
        support: [],
    }),
    captionSide: property({
        css: "caption-side",
        values: [
            "top",
            "bottom",
            "block-start",
            "block-end",
            "inline-start",
            "inline-end",
        ],
        type: "string",
        support: [],
    }),
    caretColor: property({
        css: "caret-color",
        values: ["auto", "transparent", "currentcolor"],
        type: COLOR,
        support: [],
    }),
    clear: property({
        css: "clear",
        values: ["none", "left", "right", "both", "inline-start", "inline-end"],
        type: "string",
        support: [],
    }),
    clip: property({
        css: "clip",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    clipPath: property({
        css: "clip-path",
        values: [
            "none",
            "margin-box",
            "border-box",
            "padding-box",
            "content-box",
            "fill-box",
            "stroke",
            "view-box",
        ],
        type: "string",
        support: [],
    }),
    color: property({
        css: "color",
        values: [],
        type: COLOR,
        support: [],
    }),
    colorAdjust: property({
        css: "color-adjust",
        values: [],
        type: "string",
        support: [],
    }),
    colorScheme: property({
        css: "color-scheme",
        values: ["normal", "light", "dark"],
        type: "string",
        support: [],
    }),
    columnCount: property({
        css: "column-count",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    columnFill: property({
        css: "column-fill",
        values: ["auto", "balance", "balance-all"],
        type: "string",
        support: [],
    }),
    columnGap: property({
        css: "column-gap",
        values: ["normal"],
        type: "string",
        support: [],
    }),
    columnRule: property({
        css: "column-rule",
        values: [],
        type: "string",
        support: [],
    }),
    columnRuleColor: property({
        css: "column-rule-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    columnRuleStyle: property({
        css: "column-rule-style",
        values: [
            "none",
            "hidden",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        support: [],
    }),
    columnRuleWidth: property({
        css: "column-rule-width",
        values: ["thin", "medium", "thick"],
        type: "string",
        support: [],
    }),
    columnSpan: property({
        css: "column-span",
        values: ["none", "all"],
        type: "string",
        support: [],
    }),
    columnWidth: property({
        css: "column-width",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    columns: property({
        css: "columns",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    contain: property({
        css: "contain",
        values: [
            "none",
            "strict",
            "content",
            "size",
            "layout",
            "style",
            "paint",
        ],
        type: "string",
        support: [],
    }),
    content: property({
        css: "content",
        values: [
            "normal",
            "none",
            "open-quote",
            "close-quote",
            "no-open-quote",
            "no-close-quote",
        ],
        type: "string",
        support: [],
    }),
    contentVisibility: property({
        css: "content-visibility",
        values: ["visible", "hidden", "auto"],
        type: "string",
        support: [],
    }),
    counterIncrement: property({
        css: "counter-increment",
        values: [],
        type: "string",
        support: [],
    }),
    counterReset: property({
        css: "counter-reset",
        values: [],
        type: "string",
        support: [],
    }),
    counterSet: property({
        css: "counter-set",
        values: [],
        type: "string",
        support: [],
    }),
    cursor: property({
        css: "cursor",
        values: [
            "auto",
            "default",
            "none",
            "context-menu",
            "help",
            "pointer",
            "progress",
            "wait",
            "cell",
            "crosshair",
            "text",
            "vertical-text",
            "alias",
            "move",
            "no-drop",
            "not-allowed",
            "grab",
            "grabbing",
            "n-resize",
            "e-resize",
            "w-resize",
            "ne-resize",
            "nw-resize",
            "se-resize",
            "sw-resize",
            "ew-resize",
            "ns-resize",
            "ns-resize",
            "nesw-resize",
            "nwse-resize",
            "zoom-in",
            "zoom-out",
        ],
        type: "string",
        support: [],
    }),
    direction: property({
        css: "direction",
        values: ["ltr", "rtl"],
        type: "string",
        support: [],
    }),
    display: property({
        css: "display",
        values: [
            "block",
            "inline",
            "inline-block",
            "flex",
            "inline-flex",
            "grid",
            "inline-grid",
            "flow-root",
            "none",
            "contents",
            "table",
            "table-row",
        ],
        type: "string",
        support: [],
    }),
    emptyCells: property({
        css: "empty-cells",
        values: ["show", "hide"],
        type: "string",
        support: [],
    }),
    filter: property({
        css: "filter",
        values: ["none"],
        type: "string",
        support: [],
    }),
    flex: property({
        css: "flex",
        values: ["auto", "none"],
        type: "string",
        support: [],
    }),
    flexBasis: property({
        css: "flex-basis",
        values: ["max-content", "min-content", "fit-content", "auto"],
        type: "string",
        support: [],
    }),
    flexDirection: property({
        css: "flex-direction",
        values: ["row", "row-reverse", "column", "column-reverse"],
        type: "string",
        support: [],
    }),
    flexFlow: property({
        css: "flex-flow",
        values: [],
        type: "string",
        support: [],
    }),
    flexGrow: property({
        css: "flex-grow",
        values: [],
        type: "string",
        support: [],
    }),
    flexShrink: property({
        css: "flex-shrink",
        values: [],
        type: "string",
        support: [],
    }),
    flexWrap: property({
        css: "flex-wrap",
        values: ["nowrap", "wrap", "wrap-reverse"],
        type: "string",
        support: [],
    }),
    float: property({
        css: "float",
        values: ["left", "right", "none", "inline-start", "inline-end"],
        type: "string",
        support: [],
    }),
    font: property({
        css: "font",
        values: [],
        type: "string",
        support: [],
    }),
    fontFamily: property({
        css: "font-family",
        values: [
            "serif",
            "sans-serif",
            "monospace",
            "cursive",
            "fantasy",
            "system-ui",
            "ui-serif",
            "ui-sans-serif",
            "ui-monospace",
            "ui-rounded",
            "emoji",
            "math",
            "fangsong",
        ],
        type: "string",
        support: [],
    }),
    fontFeatureSettings: property({
        css: "font-feature-settings",
        values: [],
        type: "string",
        support: [],
    }),
    fontKerning: property({
        css: "font-kerning",
        values: ["auto", "normal", "none"],
        type: "string",
        support: [],
    }),
    fontSize: property({
        css: "font-size",
        values: [
            "xx-small",
            "x-small",
            "small",
            "medium",
            "large",
            "x-large",
            "xx-large",
            "xxx-large",
        ],
        type: "string",
        support: [],
    }),
    fontSizeAdjust: property({
        css: "font-size-adjust",
        values: ["none"],
        type: "string",
        support: [],
    }),
    fontStretch: property({
        css: "font-stretch",
        values: [
            "ultra-condensed",
            "extra-condensed",
            "condensed",
            "semi-condensed",
            "normal",
            "semi-expanded",
            "expanded",
            "extra-expanded",
            "ultra-expanded",
        ],
        type: "string",
        support: [],
    }),
    fontStyle: property({
        css: "font-style",
        values: ["normal", "italic", "oblique"],
        type: "string",
        support: [],
    }),
    fontSynthesis: property({
        css: "font-synthesis",
        values: ["none", "weight", "style", "small-caps"],

        type: "string",
        support: [],
    }),
    fontVariant: property({
        css: "font-variant",
        values: [],
        type: "string",
        support: [],
    }),
    fontVariantAlternates: property({
        css: "font-variant-alternates",
        values: [],

        type: "string",
        support: [],
    }),
    fontVariantCaps: property({
        css: "font-variant-caps",
        values: [],
        type: "string",
        support: [],
    }),
    fontVariantEastAsian: property({
        css: "font-variant-east-asian",
        values: [],
        type: "string",
        support: [],
    }),
    fontVariantLigatures: property({
        css: "font-variant-ligatures",
        values: [],
        type: "string",
        support: [],
    }),
    fontVariantNumeric: property({
        css: "font-variant-numeric",
        values: [],
        type: "string",
        support: [],
    }),
    fontVariantPosition: property({
        css: "font-variant-position",
        values: [],
        type: "string",
        support: [],
    }),
    fontVariantSettings: property({
        css: "font-variant-settings",
        values: [],
        type: "string",
        support: [],
    }),
    fontWeight: property({
        css: "font-weight",
        values: [
            "normal",
            "bold",
            "lighter",
            "bolder",
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700",
            "800",
            "900",
        ],
        type: "string",
        support: [],
    }),
    forcedColorAdjust: property({
        css: "forced-color-adjust",
        values: ["auto", "none"],
        type: COLOR,
        support: [],
    }),
    gap: property({
        css: "gap",
        values: [],
        type: "string",
        support: [],
    }),
    grid: property({
        css: "grid",
        values: ["none"],
        type: "string",
        support: [],
    }),
    gridArea: property({
        css: "grid-area",
        values: [],
        type: "string",
        support: [],
    }),
    gridAutoColumns: property({
        css: "grid-auto-columns",
        values: ["in-content", "max-content", "auto"],
        type: "string",
        support: [],
    }),
    gridAutoFlow: property({
        css: "grid-auto-flow",
        values: ["row", "column", "dense"],
        type: "string",
        support: [],
    }),
    gridAutoRows: property({
        css: "grid-auto-rows",
        values: ["min-content", "max-content", "auto"],
        type: "string",
        support: [],
    }),
    gridColumn: property({
        css: "grid-column",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    gridColumnEnd: property({
        css: "grid-column-end",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    gridColumnGap: property({
        css: "grid-column-gap",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    gridColumnStart: property({
        css: "grid-column-start",
        values: [],

        type: "string",
        support: [],
    }),
    gridGap: property({
        css: "grid-gap",
        values: [],
        type: "string",
        support: [],
    }),
    gridRow: property({
        css: "grid-row",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    gridRowEnd: property({
        css: "grid-row-end",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    gridRowGap: property({
        css: "grid-row-gap",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    gridRowStart: property({
        css: "grid-row-start",
        values: [],
        type: "string",
        support: [],
    }),
    gridTemplate: property({
        css: "grid-template",
        values: ["none"],
        type: "string",
        support: [],
    }),
    gridTemplateAreas: property({
        css: "grid-template-areas",
        values: ["none"],
        type: "string",
        support: [],
    }),
    gridTemplateColumns: property({
        css: "grid-template-columns",
        values: ["none"],
        type: "string",
        support: [],
    }),
    gridTemplateRows: property({
        css: "grid-template-rows",
        values: ["none"],
        type: "string",
        support: [],
    }),
    hangingPunctuation: property({
        css: "hanging-punctuation",
        values: ["none", "first", "last", "force-end", "allow-end"],
        type: "string",
        support: [],
    }),
    height: property({
        css: "height",
        values: ["max-content", "min-content", "auto"],
        type: "string",
        support: [],
    }),
    hyphens: property({
        css: "hyphens",
        values: ["none", "manual", "auto"],
        type: "string",
        support: [],
    }),
    isolation: property({
        css: "isolation",
        values: ["auto", "isolate"],
        type: "string",
        support: [],
    }),
    imageOrientation: property({
        css: "image-orientation",
        values: ["none", "from-image"],
        type: "string",
        support: [],
    }),
    imageRendering: property({
        css: "image-rendering",
        values: ["auto", "crisp-edge", "pixelated"],
        type: "string",
        support: [],
    }),
    imageResolution: property({
        css: "image-resolution",
        values: ["from-image"],
        type: "string",
        support: [],
    }),
    initialLetter: property({
        css: "initial-letter",
        values: ["normal"],
        type: "string",
        support: [],
    }),
    inlineSize: property({
        css: "inline-size",
        values: ["auto", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    inset: property({
        css: "inset",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    insetBlock: property({
        css: "inset-inline",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    insetBlockStart: property({
        css: "inset-block-start",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    insetInlineStart: property({
        css: "inset-inline-start",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    justifyContent: property({
        css: "justify-content",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "left",
            "right",
            "normal",
            "space-between",
            "space-around",
            "stretch",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        support: [],
    }),
    justifyItems: property({
        css: "justify-items",
        values: [
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "left",
            "right",
            "normal",
            "space-between",
            "space-around",
            "stretch",
            "safe center",
            "unsafe center",
            "self-start",
            "self-end",
            "baseline",
            "first baseline",
            "last baseline",
            "legacy right",
            "legacy left",
            "legacy center",
        ],
        type: "string",
        support: [],
    }),
    justifySelf: property({
        css: "justify-self",
        values: [
            "auto",
            "normal",
            "stretch",
            "center",
            "start",
            "end",
            "flex-start",
            "flex-end",
            "self-start",
            "self-end",
            "left",
            "right",
            "baseline",
            "first baseline",
            "last baseline",
            "safe center",
            "unsafe center",
        ],
        type: "string",
        support: [],
    }),
    left: property({
        css: "left",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    letterSpacing: property({
        css: "letter-spacing",
        values: ["normal"],
        type: "string",
        support: [],
    }),
    lineHeight: property({
        css: "line-height",
        values: ["normal"],
        type: "string",
        support: [],
    }),
    lineBreak: property({
        css: "line-break",
        values: ["auto", "loose", "normal", "strict", "anywhere"],
        type: "string",
        support: [],
    }),
    listStyle: property({
        css: "list-style",
        values: [],
        type: "string",
        support: [],
    }),
    listStyleImage: property({
        css: "list-style-image",
        values: ["none"],
        type: "string",
        support: [],
    }),
    listStylePosition: property({
        css: "list-style-position",
        values: ["inside", "outside"],
        type: "string",
        support: [],
    }),
    listStyleType: property({
        css: "list-style-type",
        values: [
            "none",
            "disc",
            "circle",
            "square",
            "decimal",
            "georgian",
            "trad-chinese-informal",
            "kannada",
            "decimal-leading-zero",
            "lower-roman",
            "upper-roman",
            "lower-greek",
            "lower-alpha",
            "upper-alpha",
            "armenian",
            "bengali",
            "cambodian",
            "devanagari",
            "gujarati",
            "kannada",
            "lao",
            "malayalam",
            "myanmar",
            "oriya",
            "telugu",
        ],
        type: "string",
        support: [],
    }),
    margin: property({
        css: "margin",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginBlock: property({
        css: "margin-block",
        values: [],
        type: "string",
        support: [],
    }),
    marginBlockEnd: property({
        css: "margin-block-end",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginBlockStart: property({
        css: "margin-block-start",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginBottom: property({
        css: "margin-bottom",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginInline: property({
        css: "margin-inline",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginInlineEnd: property({
        css: "margin-inline-end",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginInlineStart: property({
        css: "margin-inline-start",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginLeft: property({
        css: "margin-left",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginRight: property({
        css: "margin-right",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    marginTop: property({
        css: "margin-top",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    mask: property({
        css: "mask",
        values: ["none"],
        type: "string",
        support: [],
    }),
    maskBorder: property({
        css: "mask-border",
        values: [],
        type: "string",
        support: [],
    }),
    maskBorderMode: property({
        css: "mask-border-mode",
        values: ["luminance", "alpha"],
        type: "string",
        support: [],
    }),
    maskBorderOutset: property({
        css: "mast-border-outset",
        values: [],
        type: "string",
        support: [],
    }),
    maskBorderRepeat: property({
        css: "mask-border-repeat",
        values: ["stretch", "repeat", "round", "space"],
        type: "string",
        support: [],
    }),
    maskBorderSlice: property({
        css: "mask-border-slice",
        values: [],
        type: "string",
        support: [],
    }),
    maskBorderSource: property({
        css: "mask-border-source",
        values: ["none"],
        type: "string",
        support: [],
    }),
    maskBorderWidth: property({
        css: "mask-border-width",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    maskClip: property({
        css: "mask-clip",
        values: [
            "content-box",
            "padding-box",
            "border-box",
            "margin-box",
            "fill-box",
            "stroke-box",
            "view-box",
            "no-clip",
        ],
        type: "string",
        support: [],
    }),
    maskComposite: property({
        css: "mask-composite",
        values: ["add", "subtract", "intersect", "exclude"],
        type: "string",
        support: [],
    }),
    maskImage: property({
        css: "mask-image",
        values: ["none"],
        type: "string",
        support: [],
    }),
    maskMode: property({
        css: "mask-mode",
        values: ["alpha", "luminance", "match-source"],
        type: "string",
        support: [],
    }),
    maskOrigin: property({
        css: "mask-origin",
        values: [
            "content-box",
            "padding-box",
            "border-box",
            "margin-box",
            "fill-box",
            "stroke-box",
            "view-box",
            "content",
            "padding",
            "border",
        ],
        type: "string",
        support: [],
    }),
    maskPosition: property({
        css: "mask-position",
        values: ["top", "bottom", "left", "right", "center"],
        type: "string",
        support: [],
    }),
    maskRepeat: property({
        css: "mask-repeat",
        values: [
            "repeat-x",
            "repeat-y",
            "repeat",
            "space",
            "round",
            "no-repeat",
        ],
        type: "string",
        support: [],
    }),
    maskSize: property({
        css: "mask-size",
        values: ["cover", "contain"],
        type: "string",
        support: [],
    }),
    maskType: property({
        css: "mask-type",
        values: ["alpha", "luminance"],
        type: "string",
        support: [],
    }),
    mathStyle: property({
        css: "math-style",
        values: ["normal", "compact"],
        type: "string",
        support: [],
    }),
    maxBlockSize: property({
        css: "max-block-size",
        values: ["none", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    maxInlineSize: property({
        css: "max-inline-size",
        values: ["none", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    minBlockSize: property({
        css: "min-block-size",
        values: ["none", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    minInlineSize: property({
        css: "min-inline-size",
        values: ["none", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    maxHeight: property({
        css: "max-height",
        values: ["none", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    maxWidth: property({
        css: "max-width",
        values: ["none", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    minHeight: property({
        css: "min-height",
        values: ["none", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    minWidth: property({
        css: "min-width",
        values: ["none", "max-content", "min-content"],
        type: "string",
        support: [],
    }),
    mixBlendMode: property({
        css: "mix-blend-mode",
        values: [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "darken",
            "lighten",
            "color-dodge",
            "color-burn",
            "hard-light",
            "soft-light",
            "difference",
            "exclusion",
            "hue",
            "saturation",
            "color",
            "luminosity",
        ],
        type: "string",
        support: [],
    }),
    objectFit: property({
        css: "object-fit",
        values: ["contain", "cover", "fill", "none", "scale-down"],
        type: "string",
        support: [],
    }),
    objectPosition: property({
        css: "object-position",
        values: ["top", "bottom", "left", "right", "center"],
        type: "string",
        support: [],
    }),
    offset: property({
        css: "offset",
        values: ["none", "auto"],
        type: "string",
        support: [],
    }),
    offsetAnchor: property({
        css: "offset-anchor",
        values: ["top", "bottom", "left", "right", "center", "auto"],
        type: "string",
        support: [],
    }),
    offsetDistance: property({
        css: "offset-distance",
        values: [],
        type: "string",
        support: [],
    }),
    offsetPath: property({
        css: "offset-path",
        values: ["none", "margin-box", "stroke-box"],
        type: "string",
        support: [],
    }),
    offsetPosition: property({
        css: "offset-position",
        values: ["top", "bottom", "left", "right", "center", "auto"],
        type: "string",
        support: [],
    }),
    offsetRotate: property({
        css: "offset-rotate",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    opacity: property({
        css: "opacity",
        values: [],
        type: "string",
        support: [],
    }),
    order: property({
        css: "order",
        values: [],
        type: "string",
        support: [],
    }),
    orphans: property({
        css: "orphans",
        values: [],
        type: "string",
        support: [],
    }),
    outline: property({
        css: "outline",
        values: [],
        type: "string",
        support: [],
    }),
    outlineColor: property({
        css: "outline-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    outlineOffset: property({
        css: "outline-offset",
        values: [],
        type: "string",
        support: [],
    }),
    outlineStyle: property({
        css: "outline-style",
        values: [
            "auto",
            "none",
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
        ],
        type: "string",
        support: [],
    }),
    outlineWidth: property({
        css: "outline-width",
        values: ["thin", "medium", "thick"],
        type: "string",
        support: [],
    }),
    overflow: property({
        css: "overflow",
        values: ["visible", "hidden", "clip", "scroll", "auto"],
        type: "string",
        support: [],
    }),
    overflowAnchor: property({
        css: "overflow-anchor",
        values: ["auto", "none"],
        type: "string",
        support: [],
    }),
    overflowBlock: property({
        css: "overflow-block",
        values: ["visible", "hidden", "scroll", "auto"],
        type: "string",
        support: [],
    }),
    overflowClipMargin: property({
        css: "overflow-clip-margin",
        values: [],
        type: "string",
        support: [],
    }),
    overflowInline: property({
        css: "overflow-inline",
        values: ["visible", "hidden", "scroll", "auto"],
        type: "string",
        support: [],
    }),
    overflowWrap: property({
        css: "overflow-wrap",
        values: ["normal", "break-word", "anywhere"],
        type: "string",
        support: [],
    }),
    overflowX: property({
        css: "overflow-x",
        values: ["visible", "hidden", "clip", "scroll", "auto"],
        type: "string",
        support: [],
    }),
    overflowY: property({
        css: "overflow-y",
        values: ["visible", "hidden", "clip", "scroll", "auto"],
        type: "string",
        support: [],
    }),
    overscrollBehavior: property({
        css: "overscroll-behavior",
        values: ["auto", "contain", "none"],
        type: "string",
        support: [],
    }),
    overscrollBehaviorBlock: property({
        css: "overscroll-behavior-block",
        values: ["auto", "contain", "none"],
        type: "string",
        support: [],
    }),
    overscrollBehaviorInline: property({
        css: "overscroll-behavior-inline",
        values: ["auto", "contain", "none"],
        type: "string",
        support: [],
    }),
    overscrollBehaviorX: property({
        css: "overscroll-behavior-x",
        values: ["auto", "contain", "none"],
        type: "string",
        support: [],
    }),
    overscrollBehaviorY: property({
        css: "overscroll-behavior-y",
        values: ["auto", "contain", "none"],
        type: "string",
        support: [],
    }),
    right: property({
        css: "right",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    padding: property({
        css: "padding",
        values: [],
        type: "string",
        support: [],
    }),
    paddingBlock: property({
        css: "padding-block",
        values: [],
        type: "string",
        support: [],
    }),
    paddingBlockEnd: property({
        css: "padding-block-end",
        values: [],
        type: "string",
        support: [],
    }),
    paddingBlockStart: property({
        css: "padding-block-start",
        values: [],
        type: "string",
        support: [],
    }),
    paddingBottom: property({
        css: "padding-bottom",
        values: [],
        type: "string",
        support: [],
    }),
    paddingInline: property({
        css: "padding-inline",
        values: [],
        type: "string",
        support: [],
    }),
    paddingInlineEnd: property({
        css: "padding-inline-end",
        values: [],
        type: "string",
        support: [],
    }),
    paddingInlineStart: property({
        css: "padding-inline-start",
        values: [],
        type: "string",
        support: [],
    }),
    paddingLeft: property({
        css: "padding-left",
        values: [],
        type: "string",
        support: [],
    }),
    paddingRight: property({
        css: "padding-right",
        values: [],
        type: "string",
        support: [],
    }),
    paddingTop: property({
        css: "padding-top",
        values: [],
        type: "string",
        support: [],
    }),
    pageBreakAfter: property({
        css: "page-break-after",
        values: [],
        type: "string",
        support: [],
    }),
    pageBreakBefore: property({
        css: "page-break-before",
        values: [],
        type: "string",
        support: [],
    }),
    pageBreakInside: property({
        css: "page-break-inside",
        values: [],
        type: "string",
        support: [],
    }),
    perspective: property({
        css: "perspective",
        values: ["none"],
        type: "string",
        support: [],
    }),
    perspectiveOrigin: property({
        css: "perspective-origin",
        values: ["top", "center", "right"],
        type: "string",
        support: [],
    }),
    placeContent: property({
        css: "place-content",
        values: [
            "start",
            "end",
            "flex-start",
            "flex-end",
            "center",
            "center",
            "left",
            "right",
            "space-between",
            "baseline",
            "first baseline",
            "last baseline",
            "space-evenly",
            "stretch",
            "safe",
            "unsafe",
        ],
        type: "string",
        support: [],
    }),
    placeItems: property({
        css: "place-items",
        values: [
            "start",
            "end",
            "flex-start",
            "flex-end",
            "center",
            "center",
            "left",
            "right",
            "space-between",
            "baseline",
            "first baseline",
            "last baseline",
            "space-evenly",
            "stretch",
            "safe",
            "unsafe",
            "normal",
            "legacy",
            "self-start",
            "self-end",
        ],
        type: "string",
        support: [],
    }),
    pointerEvents: property({
        css: "pointer-events",
        values: [
            "auto",
            "none",
            "visiblePainted",
            "visibleFill",
            "visibleStroke",
            "visible",
            "painted",
            "fill",
            "stroke",
            "all",
        ],
        type: "string",
        support: [],
    }),
    position: property({
        css: "position",
        values: ["static", "relative", "absolute", "fixed", "sticky"],
        type: "string",
        support: [],
    }),
    quotes: property({
        css: "quotes",
        values: ["none", "auto"],
        type: "string",
        support: [],
    }),
    resize: property({
        css: "resize",
        values: [],
        methods: ["none", "both", "horizontal", "vertical", "block", "inline"],
        type: "string",
        support: [],
    }),
    rotate: property({
        css: "rotate",
        values: ["none"],
        type: "string",
        support: [],
    }),
    rowGap: property({
        css: "row-gap",
        values: [],
        type: "string",
        support: [],
    }),
    rubyAlign: property({
        css: "ruby-align",
        values: ["start", "center", "space-between", "space-around"],
        type: "string",
        support: [],
    }),
    rubyPosition: property({
        css: "ruby-position",
        values: ["over", "under", "inter-character", "alternate"],
        type: "string",
        support: [],
    }),
    scale: property({
        css: "scale",
        values: [],
        methods: ["none"],
        type: "string",
        support: [],
    }),
    scrollBehavior: property({
        css: "scroll-behavior",
        values: ["auto", "smooth"],
        type: "string",
        support: [],
    }),
    scrollMargin: property({
        css: "scroll-margin",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginBlock: property({
        css: "scroll-margin-block",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginBlockEnd: property({
        css: "scroll-margin-block-end",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginBlockStart: property({
        css: "scroll-margin-block-start",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginBottom: property({
        css: "scroll-margin-bottom",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginInline: property({
        css: "scroll-margin-inline",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginInlineEnd: property({
        css: "scroll-margin-inline-end",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginInlineStart: property({
        css: "scroll-margin-inline-start",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginLeft: property({
        css: "scroll-margin-left",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginRight: property({
        css: "scroll-margin-right",
        values: [],
        type: "string",
        support: [],
    }),
    scrollMarginTop: property({
        css: "scroll-margin-top",
        values: [],
        type: "string",
        support: [],
    }),
    scrollPadding: property({
        css: "scroll-padding",
        values: [],
        type: "string",
        support: [],
    }),
    scrollPaddingBlock: property({
        css: "scroll-padding-block",
        values: [],
        type: "string",
        support: [],
    }),
    scrollPaddingBlockEnd: property({
        css: "scroll-padding-block-end",
        values: [],

        type: "string",
        support: [],
    }),
    scrollPaddingBlockStart: property({
        css: "scroll-padding-block-start",
        values: [],
        type: "string",
        support: [],
    }),
    scrollPaddingBottom: property({
        css: "scroll-padding-bottom",
        values: [],
        type: "string",
        support: [],
    }),
    scrollPaddingInline: property({
        css: "scroll-padding-inline-end",
        values: [],
        type: "string",
        support: [],
    }),
    scrollPaddingInlineStart: property({
        css: "scroll-padding-inline-start",
        values: [],
        type: "string",
        support: [],
    }),
    scrollPaddingLeft: property({
        css: "scroll-padding-left",
        values: [],

        type: "string",
        support: [],
    }),
    scrollPaddingRight: property({
        css: "scroll-padding-right",
        values: [],
        type: "string",
        support: [],
    }),
    scrollPaddingTop: property({
        css: "scroll-padding-top",
        values: [],
        type: "string",
        support: [],
    }),
    scrollSnapAlign: property({
        css: "scroll-snap-align",
        values: ["none", "start", "end", "center"],
        type: "string",
        support: [],
    }),
    scrollSnapStop: property({
        css: "scroll-snap-stop",
        values: ["normal", "always"],
        type: "string",
        support: [],
    }),
    scrollSnapType: property({
        css: "scroll-snap-type",
        values: [
            "none",
            "x",
            "y",
            "block",
            "inline",
            "both",
            "mandatory",
            "proximity",
        ],
        type: "string",
        support: [],
    }),
    scrollbarColor: property({
        css: "scrollbar-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    scrollbarGutter: property({
        css: "scrollbar-gutter",
        values: ["auto", "stable", "both-edges"],
        type: "string",
        support: [],
    }),
    scrollbarWidth: property({
        css: "scrollbar-width",
        values: ["auto", "thin", "none"],
        type: "string",
        support: [],
    }),
    shapeImageThreshold: property({
        css: "shape-image-threshold",
        values: [],
        type: "string",
        support: [],
    }),
    shapeMargin: property({
        css: "shape-margin",
        values: [],
        type: "string",
        support: [],
    }),
    shapeOutside: property({
        css: "shape-outside",
        values: [
            "none",
            "margin-box",
            "content-box",
            "border-box",
            "padding-box",
        ],
        type: "string",
        support: [],
    }),
    tabSize: property({
        css: "tab-size",
        values: [],
        type: "string",
        support: [],
    }),
    tableLayout: property({
        css: "table-layout",
        values: ["auto", "fixed"],
        type: "string",
        support: [],
    }),
    textAlign: property({
        css: "text-align",
        values: [
            "start",
            "end",
            "left",
            "right",
            "center",
            "justify",
            "justify-all",
            "match-parent",
        ],
        type: "string",
        support: [],
    }),
    textAlignLast: property({
        css: "text-align-last",
        values: ["start", "end", "left", "right", "center", "justify"],
        type: "string",
        support: [],
    }),
    textCombineUpright: property({
        css: "text-combine-upright",
        values: ["none", "all"],
        type: "string",
        support: [],
    }),
    textDecoration: property({
        css: "text-decoration",
        values: ["none"],

        type: "string",
        support: [],
    }),
    textDecorationColor: property({
        css: "text-decoration-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    textDecorationLine: property({
        css: "text-decoration-line",
        values: ["none", "underline", "overline", "line-through", "blink"],
        type: "string",
        support: [],
    }),
    textDecorationSkip: property({
        css: "text-decoration-skip",
        values: [
            "none",
            "objects",
            "spaces",
            "edges",
            "box-decoration",
            "leading-spaces",
            "trailing-spaces",
        ],
        type: "string",
        support: [],
    }),
    textDecorationSkipInk: property({
        css: "text-decoration-skip-ink",
        values: ["none", "auto", "all"],
        type: "string",
        support: [],
    }),
    textDecorationStyle: property({
        css: "text-decoration-style",
        values: ["solid", "double", "dotted", "dashed", "wavy"],
        type: "string",
        support: [],
    }),
    textDecorationThickness: property({
        css: "text-decoration-thickness",
        values: ["auto", "from-font"],
        type: "string",
        support: [],
    }),
    textEmphasis: property({
        css: "text-emphasis",
        values: ["none"],
        type: "string",
        support: [],
    }),
    textEmphasisColor: property({
        css: "text-emphasis-color",
        values: [],
        type: COLOR,
        support: [],
    }),
    textEmphasisPosition: property({
        css: "text-emphasis-position",
        values: ["over", "under", "right", "left"],
        type: "string",
        support: [],
    }),
    textEmphasisStyle: property({
        css: "text-emphasis-style",
        values: [
            "none",
            "filled",
            "open",
            "dot",
            "circle",
            "double-circle",
            "triangle",
            "sesame",
        ],
        type: "string",
        support: [],
    }),
    textIndent: property({
        css: "text-indent",
        values: [],
        type: "string",
        support: [],
    }),
    textJustify: property({
        css: "text-justify",
        values: ["none", "auto", "inter-word", "inter-character", "distribute"],
        type: "string",
        support: [],
    }),
    textOrientation: property({
        css: "text-orientation",
        values: [
            "mixed",
            "upright",
            "sideways-right",
            "sideways",
            "use-glyph-orientation",
        ],
        type: "string",
        support: [],
    }),
    textOverflow: property({
        css: "text-overflow",
        values: ["clip", "ellipsis"],
        type: "string",
        support: [],
    }),
    textRendering: property({
        css: "text-rendering",
        values: [
            "auto",
            "optimizeSpeed",
            "optimizeLegibility",
            "geometricPrecision",
        ],
        type: "string",
        support: [],
    }),
    textShadow: property({
        css: "text-shadow",
        values: [],
        type: "string",
        support: [],
    }),
    textSizeAdjust: property({
        css: "text-size-adjust",
        values: [],
        type: "string",
        support: [],
    }),
    textTransform: property({
        css: "text-transform",
        values: [
            "none",
            "capitalize",
            "uppercase",
            "lowercase",
            "full-width",
            "full-size-kana",
        ],
        type: "string",
        support: [],
    }),
    textUnderlineOffset: property({
        css: "text-underline-offset",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    textUnderlinePosition: property({
        css: "text-underline-position",
        values: ["auto", "under", "left", "right"],
        type: "string",
        support: [],
    }),
    top: property({
        css: "top",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    touchAction: property({
        css: "touch-action",
        values: [
            "auto",
            "none",
            "pan-x",
            "pan-y",
            "manipulation",
            "pinch-zoom",
        ],
        type: "string",
        support: [],
    }),
    transform: property({
        css: "transform",
        values: [],
        type: "string",
        support: [],
    }),
    transformBox: property({
        css: "transform-box",
        values: [
            "content-box",
            "border-box",
            "fill-box",
            "stroke-box",
            "view-box",
        ],
        type: "string",
        support: [],
    }),
    transformOrigin: property({
        css: "transform-origin",
        values: ["left", "center", "right", "top", "bottom"],
        type: "string",
        support: [],
    }),
    transformStyle: property({
        css: "transform-style",
        values: ["flat", "preserve-3d"],
        type: "string",
        support: [],
    }),
    transition: property({
        css: "transition",
        values: [],
        type: "string",
        support: [],
    }),
    transitionDelay: property({
        css: "transition-delay",
        values: [],
        type: "string",
        support: [],
    }),
    transitionDuration: property({
        css: "transition-duration",
        values: [],
        type: "string",
        support: [],
    }),
    transitionProperty: property({
        css: "transition-property",
        values: [],
        type: "string",
        support: [],
    }),
    transitionTimingFunction: property({
        css: "transition-timing-function",
        values: [
            "ease",
            "ease-in",
            "ease-out",
            "ease-in-out",
            "linear",
            "step-start",
            "step-end",
        ],
        type: "string",
        support: [],
    }),
    translate: property({
        css: "translate",
        values: ["none"],
        type: "string",
        support: [],
    }),
    unicodeBidi: property({
        css: "unicode-bidi",
        values: [],
        type: "string",
        support: [],
    }),
    userSelect: property({
        css: "user-select",
        values: ["none", "auto", "text", "contain", "all"],
        type: "string",
        support: [],
    }),
    verticalAlign: property({
        css: "vertical-align",
        values: [
            "baseline",
            "sub",
            "super",
            "text-top",
            "text-bottom",
            "middle",
            "top",
            "bottom",
        ],
        type: "string",
        support: [],
    }),
    visibility: property({
        css: "visibility",
        values: ["visible", "hidden", "collapse"],
        type: "string",
        support: [],
    }),
    whiteSpace: property({
        css: "white-space",
        values: [
            "normal",
            "nowrap",
            "pre",
            "pre-wrap",
            "pre-line",
            "break-spaces",
        ],
        type: "string",
        support: [],
    }),
    width: property({
        css: "width",
        values: ["max-content", "min-content", "auto"],
        type: "string",
        support: [],
    }),
    widows: property({
        css: "widows",
        values: [],
        type: "string",
        support: [],
    }),
    wordBreak: property({
        css: "word-break",
        values: ["normal", "break-all", "keep-all", "break-word"],
        type: "string",
        support: [],
    }),
    wordSpacing: property({
        css: "word-spacing",
        values: ["normal"],

        type: "string",
        support: [],
    }),
    wordWrap: property({
        css: "word-wrap",
        values: ["normal", "break-word", "anywhere"],
        type: "string",
        support: [],
    }),
    writingMode: property({
        css: "writing-mode",
        values: ["horizontal-tb", "vertical-rl", "vertical-lr"],
        type: "string",
        support: [],
    }),
    zIndex: property({
        css: "z-index",
        values: ["auto"],
        type: "string",
        support: [],
    }),
    zoom: property({
        css: "zoom",
        values: [],
        type: "string",
        support: [],
    }),
    webkitLineClamp: property({
        css: "-webkit-line-clamp",
        values: [],
        type: "string",
        support: [],
    }),
    webkitAppearance: property({
        css: "-webkit-appearance",
        values: [],
        type: "string",
        support: [],
    }),
    webkitTextEmphasis: property({
        css: "-webkit-text-emphasis",
        values: [],
        type: "string",
        support: [],
    }),
    webkitHyphens: property({
        css: "-webkit-hyphens",
        values: [],
        type: "string",
        support: [],
    }),
    mozAppearance: property({
        css: "-moz-appearance",
        values: [],
        type: "string",
        support: [],
    }),
    mozTabSize: property({
        css: "-moz-tab-size",
        values: [],
        type: "string",
        support: [],
    }),
    mozHyphens: property({
        css: "-moz-hyphens",
        values: [],
        type: "string",
        support: [],
    }),
    oTabSize: property({
        css: "-o-tab-size",
        values: [],
        type: "string",
        support: [],
    }),
    msHyphens: property({
        css: "-ms-hyphens",
        values: [],
        type: "string",
        support: [],
    }),

    // SVG
    alignmentBaseline: property({
        css: "alignment-baseline",
        values: [],
        type: "string",
        support: [],
    }),
    baselineShift: property({
        css: "baseline-shift",
        values: [],
        type: "string",
        support: [],
    }),
    clipRule: property({
        css: "clip-rule",
        values: [],
        type: "string",
        support: [],
    }),
    colorInterpolation: property({
        css: "color-interpolation",
        values: [],
        type: "string",
        support: [],
    }),
    colorInterpolationFilter: property({
        css: "color-interpolation-filters",
        values: [],
        type: "string",
        support: [],
    }),
    colorProfile: property({
        css: "color-profile",
        values: [],
        type: "string",
        support: [],
    }),
    colorRendering: property({
        css: "color-rendering",
        values: [],
        type: "string",
        support: [],
    }),
    dominantBaseline: property({
        css: "dominant-baseline",
        values: [],
        type: "string",
        support: [],
    }),
    enableBackground: property({
        css: "enable-background",
        values: [],
        type: "string",
        support: [],
    }),
    fill: property({ css: "fill", values: [], type: "string", support: [] }),
    fillOpacity: property({
        css: "fill-opacity",
        values: [],
        type: "string",
        support: [],
    }),
    fillRule: property({
        css: "fill-rule",
        values: [],
        type: "string",
        support: [],
    }),
    filter: property({
        css: "filter",
        values: [],
        type: "string",
        support: [],
    }),
    floodColor: property({
        css: "flood-color",
        values: [],
        type: "string",
        support: [],
    }),
    floodOpacity: property({
        css: "flood-opacity",
        values: [],
        type: "string",
        support: [],
    }),
    glyphOrientationHorizontal: property({
        css: "glyph-orientation-horizontal",
        values: [],
        type: "string",
        support: [],
    }),
    glyphOrientationVertical: property({
        css: "glyph-orientation-vertical",
        values: [],
        type: "string",
        support: [],
    }),
    lightingColor: property({
        css: "lighting-color",
        values: [],
        type: "string",
        support: [],
    }),
    markerEnd: property({
        css: "marker-end",
        values: [],
        type: "string",
        support: [],
    }),
    markerMid: property({
        css: "marker-mid",
        values: [],
        type: "string",
        support: [],
    }),
    markerStart: property({
        css: "marker-start",
        values: [],
        type: "string",
        support: [],
    }),
    shapeRendering: property({
        css: "shape-rendering",
        values: [],
        type: "string",
        support: [],
    }),
    stopColor: property({
        css: "stop-color",
        values: [],
        type: "string",
        support: [],
    }),
    stopOpacity: property({
        css: "stop-opacity",
        values: [],
        type: "string",
        support: [],
    }),
    stroke: property({
        css: "stroke",
        values: [],
        type: "string",
        support: [],
    }),
    strokeDasharray: property({
        css: "stroke-dasharray",
        values: [],
        type: "string",
        support: [],
    }),
    strokeDashoffset: property({
        css: "stroke-dashoffset",
        values: [],
        type: "string",
        support: [],
    }),
    strokeLinecap: property({
        css: "stroke-linecap",
        values: [],
        type: "string",
        support: [],
    }),
    strokeLinejoin: property({
        css: "stroke-linejoin",
        values: [],
        type: "string",
        support: [],
    }),
    strokeMiterlimit: property({
        css: "stroke-miterlimit",
        values: [],
        type: "string",
        support: [],
    }),
    strokeOpacity: property({
        css: "stroke-opacity",
        values: [],
        type: "string",
        support: [],
    }),
    strokeWidth: property({
        css: "stroke-width",
        values: [],
        type: "string",
        support: [],
    }),
    textAnchor: property({
        css: "text-anchor",
        values: [],
        type: "string",
        support: [],
    }),
    vectorEffect: property({
        css: "vector-effect",
        values: [],
        type: "string",
        support: [],
    }),
};

module.exports = { ListOfCssProperties, globalValues };
